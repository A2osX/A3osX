NEW
  AUTO 3,1
*--------------------------------------

*************************************************************************
* APPLE /// SOS 1.3 SOURCE CODE FILE: EQUATES
*************************************************************************
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT

*
* ENTRY BFMGR
*
* BFM INITIALIZATION ENTRIES
* (INIT CODE FOUND IN INIT.SRC)
*
* ENTRY BFMFCB1 ; FCB PAGE 1 ADDR
* ENTRY BFMFCB2 ; AND PAGE 2
* ENTRY FCBZPP
* ENTRY SISTER
* ENTRY PATHBUF
* ENTRY VCB
* ENTRY WORKSPC
* ENTRY PFIXPTR
* ENTRY BMAPAGE
* ENTRY BMBPAGE
* ENTRY FCBADDRH
* ENTRY BMAMADR
* ENTRY BMBMADR
*
*
* EXTRN LEVEL ; FILE LEVEL (LOW BYTE)
* EXTRN OPMSGRPLY ; OPERATOR MESSAGE
* EXTRN DATETIME ; THANKS TOM...
* EXTRN DMGR ; THANKS BOB...
* EXTRN REQBUF ; "
* EXTRN REQFXBUF ; "
* EXTRN GETBUFADR ; "
* EXTRN RELBUF ; "
* EXTRN BLKDLST ; "
* EXTRN SERR
* EXTRN BACKMASK
*
* ERRORS
*
* EXTRN SYSERR
*
* EXTRN BADPATH ; INVALID PATHNAME SYNTAX
* EXTRN FCBFULL ; FILE CONTROL BLOCK FULL
* EXTRN BADREFNUM ; INVALID REFNUM
* EXTRN PATHNOTFND ; PATHNAME NOT FOUND
* EXTRN VNFERR ; VOLUME NOT FOUND
* EXTRN FNFERR ; FILE NOT FOUND
* EXTRN DUPERR ; DUPLICATE FILE NAME ERROR
* EXTRN DUPVOL ; DUPLICATE VOLUME CAN'T BE LOGGED IN.
* EXTRN OVRERR ; NOT ENOUGH DISK SPACE FOR PREALLOCATION
* EXTRN DIRFULL ; DIRECTORY FULL ERROR
* EXTRN CPTERR ; FILE INCOMPATIBLE SOS VERSION
* EXTRN TYPERR ; NOT CURRENTLY SUPPORTED FILE TYPE
* EXTRN EOFERR ; POSITION ATTEMPTED BEYOND END OF FILE
* EXTRN POSNERR ; ILLEGAL POSITION (L.T. 0 OR G.T. $FFFFFF)
* EXTRN ACCSERR ; FILE ACCESS R/W REQUEST CONFLICTS WITH ATTRIBUTES.
* EXTRN BTSERR ; USER SUPPLIED BUFFER TOO SMALL
* EXTRN FILBUSY ; EITHER WRITE WAS REQUESTED OR WRITE ACCESS ALREADY ALLOCATED.
* EXTRN NOTSOS ; NOT A SOS DISKETTE
* EXTRN BADLSTCNT ; INVALID VALUE IN LIST PARAMETER
* EXTRN XDISKSW ; DISK SWITCHED
* EXTRN NOTBLKDEV ; NOT A BLOCK DEVICE
* EXTRN XNOWRITE ; DISK/MEDIA IS HARDWARE WRITE PROTECTED
* EXTRN XIOERROR ; INFORMATION ON BLOCK DEVICE NOT ACCESSABLE
* EXTRN DIRERR ; DIRECTORY ENTRY COUNT INCONSISTENT WITH ACTUAL ENTRIES
* EXTRN BITMAPADR ; BIT MAP DISK ADDRESS IMPOSSIBLE
*
* FATAL ERRORS
*
* EXTRN SYSDEATH
*
* EXTRN VCBERR ; VOLUME CONTROL BLOCK NOT USABLE
* EXTRN ALCERR ; ALLOCATION BLOCKS INVALID
* EXTRN TOOLONG ; PATHNAME BUFFER OVERFLOW
* PAGE

*
* CONSTANTS
*
DLIMIT			.eq $2F ; DELIMITER IS CURRENTLY AN ASCII '/'
SEEDTYP			.eq 1
SAPTYP			.eq 2
TRETYP			.eq 3
DIRTYP			.eq $D
HEDTYP			.eq $E
RDCMD			.eq $0
WRTCMD			.eq $1
RPTCMD			.eq $9
STATCMD			.eq $02 ; REQUEST STATUS OF BLOCK DEVICE. (BIT 0 = WRITE PROTECTED)
STATSUB			.eq $0
PRETIME			.eq $20 ; COMMAND NEEDS CURRENT DATE/TIME STAMP
PREREF			.eq $40 ; COMMAND REQUIRES FCB ADDRESS AND VERIFICATION
PREPATH			.eq $80 ; COMMAND HAS PATHNAME TO PREPROCESS
SISTER			.eq $1400
*
* VOLUME STATUS CONSTANTS (BITS)
*
DSWITCH			.eq $40 ; FOR DISK SWITCHED ERROR RECOVERY.
*
* FILE STATUS CONSTANTS
*
DATALC			.eq $1 ; DATA BLOCK NOT ALLOCATED.
IDXALC			.eq $2 ; INDEX NOT ALLOCATED
TOPALC			.eq $4 ; TOP INDEX NOT ALLOCATED
STPMOD			.eq $8 ; STORAGE TYPE MODIFIED
USEMOD			.eq $10 ; FILE USAGE MODIFIED
EOFMOD			.eq $20 ; END OF FILE MODIFIED
DATMOD			.eq $40 ; DATA BLOCK MODIFIED
IDXMOD			.eq $80 ; INDEX BLOCK MODIFIED
FCBMOD			.eq $80 ; HAS FCB/DIRECTORY BEEN MODIFIED? (FLUSH)
*
* FILE ATTRIBUTES CONSTANTS
*
READEN			.eq $1 ; READ ENABLED
WRITEN			.eq $2 ; WRITE ENABLED
NLINEN			.eq $10 ; NEW LINE ENABLED
BKBITVAL		.eq $20 ; FILE NEEDS BACKUP IF SET (BKBITFLG)
RENAMEN			.eq $40 ; RENAME OK WHEN ON.
DSTROYEN		.eq $80 ; DESTROY OK WHEN ON.
* PAGE
* HEADER INDEX CONSTANTS
*
HNLEN			.eq $0 ; HEADER NAME LENGTH (OFFSET INTO HEADER)
*HNAME EQU $1 ; HEADER NAME
HPENAB			.eq $10 ; PASSWORD ENABLE BYTE
HPASS			.eq $11 ; ENCODED PASSWORD
HCRDT			.eq $18 ; HEADER CREATION DATE
* HCRTM EQU $1A ; HEADER CREATION TIME
HVER			.eq $1C ; SOS VERSION THAT CREATED DIRECTORY
HCMP			.eq $1D ; BACKWARD COMPATIBLE WITH SOS VERSION
HATTR			.eq $1E ; HEADER ATTRIBUTES- PROTECT ETC.
* HENTLN EQU $1F ; LENGTH OF EACH ENTRY
* HMENT EQU $20 ; MAXIMUM NUMBER OF ENTRIES/BLOCK
HCENT			.eq $21 ; CURRENT NUMBER OF FILES IN DIRECTORY
HRBLK			.eq $23 ; OWNER'S DIRECTORY ADDRESS
HRENT			.eq $25 ; OWNER'S DIRECTORY ENTRY NUMBER
HRELN			.eq $26 ; OWNER'S DIRECTORY ENTRY LENGTH
VBMAP			.eq HRBLK
VTBLK			.eq HRENT ; (USED FOR ROOT DIRECTORY ONLY)
*
* VOLUME CONTROL BLOCK INDEX CONSTANTS
*
VCBSIZE			.eq $20 ; CURRENT VCB IS 32 BYTES PER ENTRY (VER 0)
VCBNML			.eq 0 ; VOLUME NAME LENGTH BYTE
VCBNAM			.eq 1 ; VOLUME NAME
VCBDEV			.eq $10 ; VOLUME'S DEVICE
VCBSTAT			.eq $11 ; VOLUME STATUS. (80=FILES OPEN. 40=DISK SWITCHED.)
VCBTBLK			.eq $12 ; TOTAL BLOCKS ON THIS VOLUME
VCBTFRE			.eq $14 ; NUMBER OF UNUSED BLOCKS
VCBROOT			.eq $16 ; ROOT DIRECTORY (DISK) ADDRESS
*VCBMORG EQU $18 ; MAP ORGANIZATION (NOT SUPPORTED BY V 0)
*VCBMBUF EQU $19 ; BIT MAP BUF NUM
VCBDMAP			.eq $1A ; FIRST (DISK) ADDRESS OF BITMAP(S)
VCBCMAP			.eq $1C ; RELATIVE ADDRESS OF BIT MAP WITH SPACE (ADD TO VCBDMAP)
*VCBMNUM EQU $1D ; RELATIVE BIT MAP CURRENTLY IN MEMORY
VCBOPNC			.eq $1E ; CURRENT NUMBER OF OPEN FILES.

VCBSWAP			.eq $1F ; $8X IF VOLUME SWAPPED; $00 IF UNSWAPPED WHERE X=LOW ORDER BYTE OF VCB ADR/16
*
* FILE CONTROL BLOCK INDEX CONSTANTS
*
FCBREFN			.eq 0 ; FILE REFERENCE NUMBER (POSITION SENSITIVE)
FCBDEVN			.eq 1 ; DEVICE (NUMBER) ON WHICH FILE RESIDES
*FCBHEAD EQU 2 ; BLOCK ADDRESS OF FILE'S DIRECTORY HEADER
*FCBDIRB EQU 4 ; BLOCK ADDRESS OF FILE'S DIRECTORY
FCBENTN			.eq 6 ; ENTRY NUMBER WITHIN DIRECTORY BLOCK
FCBSTYP			.eq 7 ; STORAGE TYPE - SEED, SAPLING, TREE, ETC.
FCBSTAT			.eq 8 ; STATUS - INDEX/DATA/EOF/USAGE/TYPE MODIFIED.
FCBATTR			.eq 9 ; ATTRIBUTES - READ/WRITE ENABLE, NEWLINE ENABLE.
FCBNEWL			.eq $A ; NEW LINE TERMINATOR (ALL 8 BITS SIGNIFICANT).
FCBBUFN			.eq $B ; BUFFER NUMBER
FCBFRST			.eq $C ; FIRST BLOCK OF FILE
FCBIDXB			.eq $E ; BLOCK ADDRESS OF INDEX (0 IF NO INDEX)
FCBDATB			.eq $10 ; BLOCK ADDRESS OF DATA
FCBMARK			.eq $12 ; CURRENT FILE MARKER.
FCBEOF			.eq $15 ; LOGICAL END OF FILE.
FCBUSE			.eq $18 ; ACTUAL NUMBER OF BLOCKS ALLOCATED TO THIS FILE.
FCBSWAP			.eq $1A ; $8N = SWAPPED, $00 = UNSWAPPED VOLUME ("N" = VCB ENTRY NUMBER)
FCBLEVL			.eq $1B ; LEVEL AT WHICH THIS FILE WAS OPENED
FCBDIRTY		.eq $1C ; FCB MARKED AS MODIFIED
* PAGE
*
* ZERO PAGE STUFF
*
PAR			.eq $A0
COMMAND			.eq PAR
C.DNAMP			.eq PAR+1
C.PATH			.eq PAR+1
C.REFNUM		.eq PAR+1
C.ISNEWL		.eq PAR+2
C.OUTEOF		.eq PAR+2
C.BASE			.eq PAR+2
C.MRKPTR		.eq PAR+2
C.OUTBUF		.eq PAR+2
C.NWPATH		.eq PAR+3
C.FILIST		.eq PAR+3
C.NEWL			.eq PAR+3
C.OUTVOL		.eq PAR+3
C.OUTREF		.eq PAR+3
C.XLIST			.eq PAR+3
C.MAXPTH		.eq PAR+3
C.MARK			.eq PAR+3
C.NEWEOF		.eq PAR+3
C.BYTES			.eq PAR+4
C.FILSTLN		.eq PAR+5
C.OUTBLK		.eq PAR+5
C.OPLIST		.eq PAR+5
C.XLEN			.eq PAR+5
C.FILID			.eq PAR+6
C.OUTCNT		.eq PAR+6
C.OPLSTLN		.eq PAR+7
C.AUXID			.eq PAR+7
C.STOR			.eq PAR+9
C.EOFLL			.eq PAR+$A
C.EOFLH			.eq PAR+$B
C.EOFHL			.eq PAR+$C
DEBUPTR			.eq PAR+$D ; NOTE SAME AS BELOW
C.EOFHH			.eq PAR+$D
* C.SPARE EQU PAR+$E
*
DEVICE			.eq $C0
DHPCMD			.eq DEVICE
UNITNUM			.eq DEVICE+1
DSTATREQ		.eq DEVICE+2
DBUFPL			.eq DEVICE+2
DBUFPH			.eq DBUFPL+1
DSTATBFL		.eq DEVICE+3 ; TO PASS BACK BUSY, WRITE PROTECT, READ PROTECT.
DSTATBFH		.eq DSTATBFL+1
RQCNTL			.eq DEVICE+4
RQCNTH			.eq RQCNTL+1
BLOKNML			.eq DEVICE+6
BLOKNMH			.eq BLOKNML+1
BRDPTR			.eq DEVICE+8 ; (AND 9)
*
DVNAMP			.eq DEVICE+1 ; USED FOR 'VOLUME' TO CALL
DVDNUM			.eq DEVICE+3 ; 'GET.DNUM' IN DEVICE MANAGER.
*

SISBPH			.eq SISTER+DBUFPH
SISDSTAT		.eq SISTER+DSTATBFH
SSBRDPH			.eq SISTER+BRDPTR+1
*
* PAGE
*
* ZERO PAGE TEMPORARIES
*
ZTEMPS			.eq $B0
PATHNML			.eq ZTEMPS
PATHNMH			.eq PATHNML+1
USRBUF			.eq ZTEMPS
TPATH			.eq ZTEMPS+2
WRKPATH			.eq ZTEMPS+4
TINDX			.eq ZTEMPS+2
DRBUFPL			.eq ZTEMPS+4
DRBUFPH			.eq DRBUFPL+1
VCBPTR			.eq ZTEMPS+6
BMADR			.eq ZTEMPS+8
FCBPTR			.eq ZTEMPS+$A
DATPTR			.eq ZTEMPS+$C
POSPTR			.eq ZTEMPS+$E
*
MAXTEMPS		.eq $F
SISTEMPS		.eq SISTER+ZTEMPS
SSTIDXH			.eq SISTER+TINDX+1
SISPATH			.eq SISTER+C.PATH+1
SSNWPATH		.eq SISTER+C.NWPATH+1
SISUSRBF		.eq SISTER+USRBUF+1
SISOUTBF		.eq SISTER+C.OUTBUF+1
SISTPATH		.eq SISTER+TPATH+1
SISBMADR		.eq SISTER+BMADR+1
SISFCBP			.eq SISTER+FCBPTR+1
SISDATP			.eq SISTER+DATPTR+1
SISPOSP			.eq SISTER+POSPTR+1
*
*
* ADDRESSES
*
PATHBUF			.eq $1000 ; NOTE: THIS IS $100 BYTES LONG.
VCB			.eq $1100
GBUF			.eq $1200 ; THRU $13FF
*
* INITIALIZATION EQUATES
*
BFMFCB1			.eq $1C ; FCB PAGE 1 ADDR
BFMFCB2			.eq $1D ; FCB PAGE 2 ADDR
BMAPAGE			.eq $B8 ; BIT MAP A ADDR
BMBPAGE			.eq $BA ; BIT MAP B ADDR
FCBZPP			.eq FCBPTR
*
*
*
* PAGE
*				DSECT FIXME: find .or address
				.ph $0 ; (THE FOLLOWING DO NOT NEED TO BE ON ZERO PAGE. 7/16/80 JRH.) FIXME: check if we need this
DATBLKL			.bs 1
DATBLKH			.bs 1
IDXADRL			.bs 1 ; DISK ADDRESS OF INDEX BLOCK
IDXADRH			.bs 1
REQL			.bs 1
REQH			.bs 1
INDXBLK			.bs 1
LEVELS			.bs 1
TOTENT			.bs 1
ENTCNTL			.bs 1
ENTCNTH			.bs 1
CNTENT			.bs 1
NOFREE			.bs 1
BMCNT			.bs 1
SAPTR			.bs 1
TREPTR			.bs 1
TLINK			.bs 2
FLINK			.bs 2
PATHCNT			.bs 1
PFIXPTR			.bs 2
BMPTR			.bs 1
BASVAL			.bs 1
HALF			.bs 1
*
*

* PAGE
*
* BIT MAP INFO TABLES (A & B)
*
BMTABSZ			.eq $6
BMTAB			.bs 1
BMBUFBNK		.bs 1
BMASTAT			.bs 1
BMADEV			.bs 1
BMAMADR			.bs 1
BMADADR			.bs 2
BMACMAP			.bs 1 ; SIMILAR TO VCBCMAP
BMBSTAT			.bs 1
BMBDEV			.bs 1
BMBMADR			.bs 1
				.bs 2 ; BMBDADR
				.bs 1 ; BMBCMAP
*
FCBADDRH		.bs 1 ; FILE CONTROL BLOCK'S BUFFER ADDRESS.
FCBANKNM		.bs 1 ; AND BANK (SISTER PAGE) BYTE.
TPOSLL			.bs 1
TPOSLH			.bs 1
TPOSHI			.bs 1
RWREQL			.bs 1
RWREQH			.bs 1
BULKCNT			.bs 1
NLCHAR			.bs 1
NPATHDEV		.bs 3 ; FOR NEW PATHNAME DEVICE AND DIRECTORY HEADER ADDRESS
IOACCESS		.bs 1 ; USED TO DETERMINE IF A CALL HAS BEEN MADE TO THE DISK DEVICE HANDLER
DEVNUM			.bs 1 ; CURRENT DEVICE TO BE ACCESSED.
TOTDEVS			.bs 1 ; USED FOR ACCESSING DRIVES IN NUMERIC ORDER
CMDTEMP			.bs 1 ; USED FOR TESTING REFNUM, TIME, AND DSKSWTCH (PRE)PROCESSING.
DATELO			.bs 1 ; DATE AND TIME MUST RESIDE ON ZERO PAGE.
DATEHI			.bs 1
TIMELO			.bs 1
TIMEHI			.bs 1
*
DUPLFLAG		.bs 1 ; USED FOR DIFFERENCE BETWEEN VNFERR AND DUPVOL BY SYNPATH
ZPGTEMP			.bs 1 ; A ONE-BYTE UNSTABLE TEMPORARY
VCBENTRY		.bs 1 ; POINTER TO CURRENT VCB ENTRY
*
				.ep 
*
* CHN PATH,4,1

*************************************************************************
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: EQUATES
*************************************************************************




*--------------------------------------
MAN
SAVE /A3OSX.BUILD/INC/EQUATES.I
LOAD /A3OSX.BUILD/SOS/SOS.S
ASM