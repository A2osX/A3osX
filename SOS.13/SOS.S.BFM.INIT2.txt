NEW
  AUTO 3,1
*--------------------------------------
* BLOCK FILE MANAGER INIT2
*
* SECONDARY INITIALIZATION ROUTINE FOR BLOCK FILE MANAGER
*
* MODIFIED: 03/25/81 TO UTILIZE NEW
* DISK DRIVER'S SEEKDSK3 ROUTINE.
* CHANGES MARKED BY 'D3RRA81084'
*
* MODIFIED: 08/19/81 TO WORK WITH NEW
* SOSLDR MODULE.
*
* CONSTANTS
*
KERNEL.BASE		.EQ $B800 				; BASE ADDRESS OF SOS KERNEL
ROMID			.EQ $A0 				;$F1B9 OF NEW ROM/D3RRA81084
SLOT			.EQ $60
BEGTRK			.EQ $9
BEGSECT			.EQ $2
ENDSECT			.EQ $6
*
* ZERO PAGE
*
*TRACK			.EQ $99
*SECTOR			.EQ $98
BFM.VOLUME		.EQ $9A
KEY				.EQ $E0 ; THRU $E7
PREV.K			.EQ KEY+$8
XIDX			.EQ KEY+$9
I				.EQ KEY+$A ; & $B
*
* ROM ROUTINES
*
*RDADR			.EQ $F1B9 ;REV1
*RDADRX			.EQ $F1BD ;REV0
*
* BFM.INIT2 ENTRY POINT
*
STATE			.DA #$FE 				; FF=1ST ENTRY, 0=2ND ENTRY, 1=PROT
*
BFM.INIT2		inc STATE
				bmi BFMI050
				jsr GETK
				lda RETRY
				beq BADNEWS
				bcc BFMI050
				jsr NMIDSBL
				jsr DC
				inc STATE

BFMI050			clc
				rts

BADNEWS			sec 					; I/O ERROR
				rts
*
* DECODE SUBROUTINE
*
* TO ENCODE:
* E0.E8: - INIT KEY & PREV.K
* B84E:4C 64 B8 - JUMPS AROUND INTERP'S 3 BYTE OVERWRITE
* 1A02.1A03: - NEW INTERP'S LOAD ADR (LO,HII)
* B81DG: - JSR FROM MONITOR
*
DC				lda B.REG 				; SAVE BANK REGISTER
				pha
				lda SYSBANK 			; AND SWITCH TO SYSTEM BANK
				sta	B.REG
				clc  					; FETCH LOADER'S INTERPRETER POINTER
				lda CZPAGE+I.BASE.P
				adc #3
				sta I
				pha
				lda CZPAGE+I.BASE.P+1
				adc #0
				sta I+1
				pha
				lda #0
				sta SXPAGE+I+1
*
				ldy I 					; ALIGN I PTR TO PAGE BOUNDARY
				lda #0
				sta I
				sta PREV.K
*
				jsr DCLOOP 				; DECODE
*
				pla  					; RETRIEVE LOADER'S INTERPRETER POINTER
				sta I+1
				pla
				sta I
*
				ldy #1 					; REPOSITION LOADER'S INTERPRETER POINTER (PUT ENCODE JMP HERE)
				lda (I),Y
				sta CZPAGE+I.BASE.P
				iny
				lda (I),Y
				sta CZPAGE+I.BASE.P+1
*
				ldy #2 					; WALK ON INTERPRETER'S FIRST INSTRUCTION (3 BYTES)
				lda #0

DCA				sta (I),Y
				dey
				bpl DCA
				pla  					; RESTORE BANK REGISTER (ENCODE JMP JUMPS TO HERE)
				sta B.REG
				rts
*
* DECODE LOOP SUBROUTINE
*
DCLOOP			ldx #7 					; SHIFT LEFT ONE BIT
				clc
				lda KEY
				bpl DC1

				sec

DC1				rol KEY,X
				dex
				bpl DC1

DC2				tya
				and #7
				eor #2
				tax
				lda KEY,X
				pha
				and #7
				tax
				pla
				clc
				adc PREV.K
				clc
				adc KEY,X
				sta PREV.K
				eor (I),Y 				; DECODE BYTE
				sta (I),Y 				; AND PUT IT BACK
				iny
				bne DC2
				inc I+1
				lda I+1
				cmp /KERNEL.BASE
				bcc DCLOOP
				rts
*
* GETKEY SUBROUTINE
*
RETRY			.DA #10+1 				;TEN RETRIES

OURTRACK		.BS 1 					;CURRENT TRACK/D3RRA81084
*
GETK			ldx #7
				stx XIDX
				ldx #SLOT
				lda MOTORON,X 			;ENSURE MOTOR STAYS ON
				lda E.REG 				; SELECT 1MHZ, ROM
				ora #$83
				sta E.REG
*
* NOTE: THE SEEKDSK3 ROUTINE HAS THESE /D3RRA81084
* CAVEATS: 1MHZ MODE, MOTOR IS ON, /D3RRA81084
* DRIVE CURRENTLY SELECTED, ROM+I/O ENABLED! /D3RRA81084
*
GETK010			lda #BEGTRK
				sta	OURTRACK 			;WHERE WE SEEK TO /D3RRA81084
				jsr	SEEKDSK3 			;HAVE DISKDH SEEK FOR US /D3RRA81084

GETK020			ldx #SLOT
				jsr	DOREAD 				;FIND A SECTOR HEADER
				bcs	IOERROR 			;=>RETRY IF BAD
				lda	SECTOR 				;WHERE ARE WE?
				cmp	#BEGSECT 			;AT THE RIGHT PLACE?
				bne	GETK020 			;=>NO, GET THERE

GETK100			ldx #1
				jsr	WAIT 				; (X * 1284) + 15 MILISECONDS
				ldx	XIDX
				lda	BFM.VOLUME
				sta	KEY,X
				dec	XIDX
				bmi	ENUFF
				inc	OURTRACK 			;BUMP FOR NEXT TRACK /D3RRA81084
				lda	OURTRACK 			;WHERE TO GO /D3RRA81084
				ldx	#SLOT
				jsr	SEEKDSK3 			;DISKDH, PLEASE SEEK ME /D3RRA81084
				ldx	#SLOT
				jsr	DOREAD
				bcc	GETK100
				bcs	IOERROR

ENUFF			ldx #SLOT
				lda	MOTOROFF,X
				lda	E.REG 				; SELECT 2MHZ, RAM
				and #$7C
				sta E.REG

				lda SECTOR
				cmp #ENDSECT 			;TRACKS SYNC'ED?
				bne NOTPROT
				lda KEY
				eor KEY+1
				beq NOTPROT 			;IF FIRST 2 VOLS ARE EQUAL
				sec
				rts

NOTPROT			lda #0
				clc
				rts

DOREAD			jsr WHICHROM
				bcs OLDREAD
				jmp RDADR
OLDREAD			jmp MON.REV0.RDADR

WHICHROM		lda RDADR
				cmp #ROMID
				clc
				beq NEWROM
				sec
NEWROM			rts

IOERROR			dec RETRY
				beq .1
				
				jmp GETK 				; TRY, TRY AGAIN

.1				jmp ENUFF 				; I/O ERROR, CLEANUP AND EXIT

WAIT			ldy #0

W1				dey
				bne W1
				dex
				bne W1
				rts
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13/sos.s.bfm.init2
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
