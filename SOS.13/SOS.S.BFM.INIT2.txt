NEW
  AUTO 3,1
*--------------------------------------
*************************************************************************  
* APPLE /// SOS 1.3 SOURCE CODE FILE: BFM.INIT2.SRC  
*************************************************************************  
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT  
				 
SBTL			 "SOS 1.1 BFM.INIT2"  
REL				  
INCLUDE			 SOSORG,6,1,254  
ORG				 ORGBFMI  
MSB				 OFF  
REP				 60  
* COPYRIGHT (C) APPLE COMPUTER INC. 1980  
* ALL RIGHTS RESERVED  
REP				 60  
*  
* BLOCK FILE MANAGER INIT2  
*  
* SECONDARY INITIALIZATION ROUTINE FOR BLOCK FILE MANAGER  
*  
* MODIFIED: 03/25/81 TO UTILIZE NEW  
* DISK DRIVER'S SEEKDSK3 ROUTINE.  
* CHANGES MARKED BY 'D3RRA81084'  
*  
* MODIFIED: 08/19/81 TO WORK WITH NEW  
* SOSLDR MODULE.  
REP				 60  
*  
ENTRY			 BFM.INIT2  
*  
*EXTRN I.BASE.P ; ENTRY IN SOSLDR  
EXTRN			 SYSBANK  
EXTRN			 SXPAGE  
EXTRN			 CZPAGE  
EXTRN			 SEEKDSK3 ;IN DISKDH/D3RRA81084  
EXTRN			 NMIDSBL ;/D3RRA81084  
I.BASE.P		 EQU $2  
PAGE			  
*  
* CONSTANTS  
*  
KERNEL.BASE		 EQU $B800 ; BASE ADDRESS OF SOS KERNEL  
ROMID			 EQU $A0 ;$F1B9 OF NEW ROM/D3RRA81084  
SLOT			 EQU $60  
BEGTRK			 EQU $9  
BEGSECT			 EQU $2  
ENDSECT			 EQU $6  
*  
* ZERO PAGE  
*  
TRACK			 EQU $99  
SECTOR			 EQU $98  
VOLUME			 EQU $9A  
KEY				 EQU $E0 ; THRU $E7  
PREV.K			 EQU KEY+$8  
XIDX			 EQU KEY+$9  
I				 EQU KEY+$A ; & $B  
*  
* ROM ROUTINES  
*  
RDADR			 EQU $F1B9 ;REV1  
RDADRX			 EQU $F1BD ;REV0  
*  
* HARDWARE LOCATIONS  
*  
E.REG			 EQU $FFDF  
B.REG			 EQU $FFEF  
MOTORON			 EQU $C089  
MOTOROFF		 EQU $C088  
PAGE			  
REP				 60  
*  
* BFM.INIT2 ENTRY POINT  
*  
REP				 60  
*  
STATE			 DFB $FE ; FF=1ST ENTRY, 0=2ND ENTRY, 1=PROT  
*  
BFM.INIT2		 EQU *  
INC				 STATE  
BMI				 BFMI050  
JSR				 GETK  
LDA				 RETRY  
BEQ				 BADNEWS  
BCC				 BFMI050  
JSR				 NMIDSBL  
JSR				 DC  
INC				 STATE  
BFMI050			 CLC  
RTS				  
BADNEWS			 SEC ; I/O ERROR  
RTS				  
PAGE			  
REP				 60  
*  
* DECODE SUBROUTINE  
*  
* TO ENCODE:  
* E0.E8: - INIT KEY & PREV.K  
* B84E:4C 64 B8 - JUMPS AROUND INTERP'S 3 BYTE OVERWRITE  
* 1A02.1A03: - NEW INTERP'S LOAD ADR (LO,HII)  
* B81DG: - JSR FROM MONITOR  
*  
REP				 60  
DC				 EQU *  
LDA				 B.REG ; SAVE BANK REGISTER  
PHA				  
LDA				 SYSBANK ; AND SWITCH TO SYSTEM BANK  
STA				 B.REG  
				CLC  ; FETCH LOADER'S INTERPRETER POINTER  
				LDA CZPAGE+I.BASE.P   
				ADC #3   
				STA I   
				PHA    
				LDA CZPAGE+I.BASE.P+1   
				ADC #0   
				STA I+1   
				PHA    
				LDA #0   
				STA SXPAGE+I+1   
*     
				LDY I ; ALIGN I PTR TO PAGE BOUNDARY  
				LDA #0   
				STA I   
				STA PREV.K   
*     
				JSR DCLOOP ; DECODE  
*     
				PLA  ; RETRIEVE LOADER'S INTERPRETER POINTER  
				STA I+1   
				PLA    
				STA I   
*     
				LDY #1 ; REPOSITION LOADER'S INTERPRETER POINTER (PUT ENCODE JMP HERE)  
				LDA (I),Y   
				STA CZPAGE+I.BASE.P   
				INY    
				LDA (I),Y   
				STA CZPAGE+I.BASE.P+1   
*     
				LDY #2 ; WALK ON INTERPRETER'S FIRST INSTRUCTION (3 BYTES)  
				LDA #0   
DCA				 STA (I),Y   
				DEY    
				BPL DCA   
				PLA  ; RESTORE BANK REGISTER (ENCODE JMP JUMPS TO HERE)  
				STA B.REG   
				RTS    
				PAGE    
				REP 60   
*    
* DECODE LOOP SUBROUTINE    
*    
REP				 60   
DCLOOP			 EQU *   
LDX				 #7 ; SHIFT LEFT ONE BIT  
CLC				    
LDA				 KEY   
				BPL DC1   
				SEC    
DC1				 ROL KEY,X   
				DEX    
				BPL DC1   
*     
DC2				 TYA    
				AND #7   
				EOR #2   
				TAX    
				LDA KEY,X   
				PHA    
				AND #7   
				TAX    
				PLA    
				CLC    
				ADC PREV.K   
				CLC    
				ADC KEY,X   
				STA PREV.K   
				EOR (I),Y ; DECODE BYTE  
				STA (I),Y ; AND PUT IT BACK  
				INY    
				BNE DC2   
				INC I+1   
				LDA I+1   
				CMP #<KERNEL.BASE   
				BCC DCLOOP   
				RTS    
				PAGE    
				REP 60   
*     
* GETKEY SUBROUTINE    
*     
				REP 60   
*     
RETRY			 DFB 10+1 ;TEN RETRIES  
OURTRACK		 DS 1 ;CURRENT TRACK/D3RRA81084  
*     
GETK			 EQU *   
				LDX #7   
				STX XIDX   
				LDX #SLOT   
				LDA MOTORON,X ;ENSURE MOTOR STAYS ON  
				LDA E.REG ; SELECT 1MHZ, ROM  
				ORA #$83   
				STA E.REG   
*  
* NOTE: THE SEEKDSK3 ROUTINE HAS THESE /D3RRA81084  
* CAVEATS: 1MHZ MODE, MOTOR IS ON, /D3RRA81084  
* DRIVE CURRENTLY SELECTED, ROM+I/O ENABLED! /D3RRA81084  
*  
GETK010			 LDA #BEGTRK  
STA				 OURTRACK ;WHERE WE SEEK TO /D3RRA81084  
JSR				 SEEKDSK3 ;HAVE DISKDH SEEK FOR US /D3RRA81084  
GETK020			 LDX #SLOT  
JSR				 DOREAD ;FIND A SECTOR HEADER  
BCS				 IOERROR ;=>RETRY IF BAD  
LDA				 SECTOR ;WHERE ARE WE?  
CMP				 #BEGSECT ;AT THE RIGHT PLACE?  
BNE				 GETK020 ;=>NO, GET THERE  
*  
GETK100			 LDX #1  
JSR				 WAIT ; (X * 1284) + 15 MILISECONDS  
LDX				 XIDX  
LDA				 VOLUME  
STA				 KEY,X  
DEC				 XIDX  
BMI				 ENUFF  
INC				 OURTRACK ;BUMP FOR NEXT TRACK /D3RRA81084  
LDA				 OURTRACK ;WHERE TO GO /D3RRA81084  
LDX				 #SLOT  
JSR				 SEEKDSK3 ;DISKDH, PLEASE SEEK ME /D3RRA81084  
LDX				 #SLOT  
JSR				 DOREAD  
BCC				 GETK100  
BCS				 IOERROR  
*  
ENUFF			 LDX #SLOT  
LDA				 MOTOROFF,X  
LDA				 E.REG ; SELECT 2MHZ, RAM  
				AND #$7C   
				STA E.REG   
				PAGE    
				LDA SECTOR   
				CMP #ENDSECT ;TRACKS SYNC'ED?  
				BNE NOTPROT   
				LDA KEY   
				EOR KEY+1   
				BEQ NOTPROT ;IF FIRST 2 VOLS ARE EQUAL  
				SEC    
				RTS    
*     
NOTPROT			 LDA #0   
				CLC    
				RTS    
*     
*     
DOREAD			 JSR WHICHROM   
				BCS OLDREAD   
				JMP RDADR   
OLDREAD			 JMP RDADRX   
*     
*     
WHICHROM		 LDA RDADR   
				CMP #ROMID   
				CLC    
				BEQ NEWROM   
				SEC    
NEWROM			 RTS    
*     
*     
IOERROR			 DEC RETRY   
				BEQ ERR1   
				JMP GETK ; TRY, TRY AGAIN  
ERR1			 JMP ENUFF ; I/O ERROR, CLEANUP AND EXIT  
*     
*     
WAIT			 LDY #0   
W1				 DEY    
				BNE W1   
				DEX    
				BNE W1   
				RTS    
				    
ZZLEN			 EQU $400   
				IFNE ZZLEN-LENBFMI   
				FAIL 2,"SOSORG FILE IS INCORRECT FOR BFM.INIT2"  
				FIN    
				    
*************************************************************************  
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: BFM.INIT2.SRC  
*************************************************************************  
				 
				 
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13\sos.s.bfm.init2.txt
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
