NEW
  AUTO 3,1
*--------------------------------------
*************************************************************************  
* APPLE /// SOS 1.3 SOURCE CODE FILE: VOLUME  
*************************************************************************  
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT  
				 
PAGE			  
REP				 40  
* NAME : VOLUME  
* FUNCTION: RETURN VOLUME INFO  
* INPUT : DEVICE NAME  
* OUTPUT : THE INFO  
* VOLATILE: ALL REGS  
REP				 40  
*  
VOLUME			 EQU *  
LDA				 C.DNAMP ; TRANSFER DEVICE NAME  
STA				 DVNAMP ; NAME FOR DMGR  
LDA				 C.DNAMP+1  
STA				 DVNAMP+1  
LDA				 SISTER+C.DNAMP+1 ; AND XTND  
STA				 SISTER+DVNAMP+1  
JSR				 GETDNUM ; GET DEVNUM  
BCC				 VOL7 ; =>SOME KINDA ERROR  
RTS				 ; RETURN ERROR  
VOL7			 BMI VOL2 ; =>IT'S GOOD...  
LDA				 #NOTBLKDEV ; NOT BLOCKED  
JMP				 VOLERR ; =>RETURN THE ERROR  
*  
* UNCONDITIONALLY READ ROOT DIRECTORY:  
*  
VOL2			 EQU *  
LDA				 SCRTCH+1  
STA				 DEVNUM ; SETUP DEV NUMBER  
LDA				 #2 ; BLKNUM=2  
LDX				 #0  
JSR				 GETROT0 ; GET IT PLEASE  
LDA				 #VNFERR ; ERROR CODE  
BCC				 VOL8 ; BRANCH IF NO ERROR ON READ  
RTS				 ; =>ERROR, PASS IT ON.  
*  
VOL8			 LDA #>VCB ; SET VCBPTR TO THE  
STA				 VCBPTR ; FIRST OF THEM  
LDA				 #<VCB  
STA				 VCBPTR+1  
*  
* IS THIS VOLUME SOS OR OTHER?  
*  
JSR				 TSTSOS ; WHICH KIND?  
BCC				 VLOGGED ; =>IT'S SOS  
JMP				 VNOTSOS ; =>NOT SOS  
*  
* IS THIS SOS VOLUME LOGGED IN?  
*  
VLOGGED			 EQU *  
JSR				 CMPVCB ; DOES VOLNAME MATCH?  
BCC				 VFOUND ; =>YES, WE KNOW ABOUT IT.  
JSR				 VNXTVCB ; BUMP TO NEXT  
BCC				 VLOGGED ; =>TRY 'EM ALL...  
BCS				 VNEW ; =>NOT FOUND, IT'S NEW (BRANCH ALWAYS)  
*  
*  
* IT'S BEEN LOGGED IN BEFORE:  
* IS IT SWAPPED IN OR OUT?  
*  
VFOUND			 EQU *  
LDY				 #VCBSWAP ; INDEX TO IT  
LDA				 (VCBPTR),Y ; SWAPPED?  
BPL				 VFOUND1 ; =>IN. RETURN THE INFO  
*  
* SWAPPED OUT. BEFORE WE SWAP IT  
* IN, MAKE SURE IT BELONGS ON  
* THIS DEVICE!  
*  
LDY				 #VCBDEV ; INDEX TO IT  
LDA				 (VCBPTR),Y ; GET ITS DEVICE  
CMP				 DEVNUM ; CORRECT DEVICE?  
EQVSWAPIN;		 =>YES
DA#DUPVOL;		 IF FOR ANOTHER DEV,
MPVOLERR;		 THEN IT'S AN ERROR!
*
* NOW SWAP-IN THIS VOLUME:
000083			 * VSWAPIN  EQU  *   
				JSR SWAPIN ; SWAP IT IN  
				JMP VINFO ; AND RETURN THE INFO  
*     
VFOUND1			 LDY #VCBDEV   
				LDA (VCBPTR),Y ; SAME DEVICES?  
				CMP DEVNUM   
				BEQ VINFO ; YES; RETURN THE INFORMATION  
				LDY #VCBSTAT   
				LDA (VCBPTR),Y ; OPEN FILES?  
				BPL VFOUND2 ; BRANCH IF NOT  
				LDA #DUPVOL   
				BNE VOLERR ; ELSE REPORT DUPLICATE VOLUME ERROR (BRANCH ALWAYS)  
VFOUND2			 LDY #VCBNML ; MOVE THE LOGIN TO THIS NEW DEVICE  
				LDA #0 ; BY UNLOGGING THE OLD  
				STA (VCBPTR),Y ; AND LOGGING IN THE NEW (DROP INTO VNEW)  
				REP 40   
*  
* IT'S A BRAND NEW VOLUME.  
* GUESS WE'LL HAVE TO LOG IT IN:  
*  
VNEW			 EQU *   
				LDA DEVNUM ; PASS A REG TO SWAPOUT  
				JSR SWAPOUT ; SWAP ANY ACTIVE VOL ON THIS DEVICE  
				BCC VNEW1 ; BRANCH ON NO ERROR  
				LDA #XIOERROR   
				RTS    
VNEW1			 LDA #>VCB ; FIND AN EMPTY VCB  
				STA VCBPTR   
				LDA #<VCB   
				STA VCBPTR+1   
VFREE			 LDY #VCBNML   
				LDA (VCBPTR),Y ; EMPTY VCB?  
				BEQ VLOGIN ; ITS FREE, USE IT  
				LDY #VCBDEV   
				LDA (VCBPTR),Y ; OR ONE WITH SAME DEVICE  
				CMP DEVNUM   
				BNE VFREEX ; BRANCH IF NO DEVICE MATCH  
				LDY #VCBSTAT   
				LDA (VCBPTR),Y ; AND NO OPEN FILES  
				BPL VLOGIN ; BRANCH IF OK TO REUSE THIS VCB  
				LDA DEVNUM ; THEN WE MUST SWAP OUT THIS VOLUME  
				JSR SWAPOUT   
				BCC VFREEX ; SWAPOUT PROCEEDED OK  
				LDA #XIOERROR ; ELSE REPORT ERROR  
				RTS    
VFREEX			 JSR VNXTVCB ; TRY NEXT  
				BCC VFREE ; MORE TO COME  
* RAN OUT OF MT'S ... FIND W/O FILES  
VNFIL			 LDY #VCBSTAT  
				LDA (VCBPTR),Y  
				BPL VLOGIN  
				JSR VNXTVCB  
				BCC VNFIL  
* ALL OPEN ... REPORT VCBFULL  
				LDA #FCBFULL   
				BNE VOLERR   
VLOGIN			 EQU *   
				JSR LOGVCB ; AND LOGIN THIS ONE  
				REP 40   
*  
* RETURN ALL THE NICE INFO:  
*  
VINFO			 EQU *   
				LDA #0   
				LDY #VCBTFRE ; FETCH VOLUME FREE BLOCK COUNT  
				STA (VCBPTR),Y ; FORCE RESCAN OF ALL  
				INY  ; BITMAPS  
				STA (VCBPTR),Y ; TO MAKE SURE VCB INFO CURRENT  
				STA REQL ; FREE BLOCKS  
				STA REQH   
				JSR TSFRBLK   
*     
				LDX VCBPTR ; GET VCB INDEX  
				LDY #0   
VINFO1			 EQU *   
				LDA VCB+VCBTBLK,X ; MOVE TOTAL  
				STA (C.OUTBLK),Y ; BLOCKS AVAIL  
				INX    
				INY    
				CPY #4 ; AND FREE ONES TOO  
				BNE VINFO1   
*     
				LDY #0 ; NOW DO VOLNAME  
				LDA (VCBPTR),Y   
				TAY    
VINFO2			 EQU *   
				LDA (VCBPTR),Y   
				STA (C.OUTVOL),Y   
				DEY    
				BPL VINFO2   
				CLC    
				BCC VOLRET ; =>DONE  
*     
VOLERR			 EQU *   
				SEC    
VOLRET			 EQU *   
				RTS    
				PAGE    
				REP 40   
* THIS ISN'T A SOS VOLUME. MARK   
* THE ACTIVE VOL THIS DEVICE   
* SO THAT IT GETS CHECKED LATER:   
*   
VNOTSOS			 EQU *   
LDY				 #VCBDEV ; IS VCB FOR THIS  
LDA				 (VCBPTR),Y ; DEVICE?  
CMP				 DEVNUM   
BNE				 VNS2   
LDY				 #VCBSTAT ; INDEX TO IT  
LDA				 (VCBPTR),Y ; GET STATUS  
BPL				 VNS2 ; =>NOT ACTIVE.  
ORA				 #DSWITCH ; SET 'SWITCHEROO'  
STA				 (VCBPTR),Y ; PUT IT BACK  
*   
VNS2			 EQU *   
JSR				 VNXTVCB ; GET NEXT VCB  
BCC				 VNOTSOS ; =>TRY 'EM ALL.  
*   
LDA				 #NOTSOS ; GIVE THE ERROR  
BNE				 VOLERR ; (BRANCH ALWAYS)  
SKP				 5   
* NAME : VNXTVCB   
* FUNCTION: BUMP VCBPTR TO NEXT VCB   
* INPUT : NOTHING   
* OUTPUT : VCBPTR UPDATED   
* : 'BCC' IF MORE TO GO   
* : 'BCS' IF DONE   
* VOLATILE: AC   
*   
VNXTVCB			 EQU *   
LDA				 VCBPTR   
CLC				   
ADC				 #VCBSIZE ; BUMP IT  
STA				 VCBPTR   
RTS				 ; CARRY SET IF END OF PAGE  
				  
CHN				 CREATE,4,1   
				  
*************************************************************************  
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: VOLUME  
*************************************************************************  
				 
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13/sos.s.bfm.v
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
