NEW
  AUTO 3,1
*--------------------------------------
*************************************************************************  
* APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.MAIN.SRC  
*************************************************************************  
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT  
				 
PAGE			  
* MAIN ENTRY POINT:  
*  
* DISABLE NMI/RESET AND ENABLE ROM/IO SPACE  
*  
MAIN			 EQU *  
LDA				 E.REG ;SAVE CALLER'S  
AND				 #$FF-$20 ;DROP SCREEN BIT  
STA				 ESAVE ; ENVIRONMENT  
DO				 1-TEST ;NO RESETLOCK FOR TESTING  
LDA				 E.REG ;GET EREG AGAIN  
AND				 #$FF-$10 ;DISABLE NMI/RESET  
FIN				  
ORA				 #$03 ;ENABLE ROM/IO SPACE  
STA				 E.REG  
*  
LDA				 NOSCROLL ;DISABLE SMOOTHSCROLL  
*  
PHP				 ;IF ALREADY SEI'D, THEN WE  
PLA				 ; STAY THAT WAY...  
ROR				 A  
ROR				 A  
ROR				 A  
ROR				 A  
STA				 IRQMASK ;'I' BIT INTO BIT7  
*  
* MAKE SURE WE HAVE A VALID COMMAND:  
*  
LDA				 D.COMMAND ;GET IT  
BMI				 BADCMD ;=>WOW!  
BEQ				 IOSETUP ;=>ZERO IS A READ  
CMP				 #10 ;OFF THE END?  
BCS				 BADCMD ;=>YES  
CMP				 #9 ;REPEAT?  
BNE				 CMD1 ;=>NOPE  
*  
* REPEAT. SIMPLY GET PRIOR COMMAND:  
*  
LDA				 PREVUNIT ;IS THIS REPEAT FOR  
CMP				 D.UNITNUM ; SAME UNIT?  
BNE				 BADOP ;=>NO? ILLEGAL!  
LDA				 PREVCMD ;YES, SET COMMAND  
BEQ				 RPTOK ;=>REPEAT'ED READ IS OK  
CMP				 #1 ;IF NOT, IS IT REPEAT'ED WRITE?  
BNE				 BADOP ;=>CAN'T REPEAT OTHER COMMANDS  
RPTOK			 EQU *  
STA				 D.COMMAND ;SAME AS BEFORE  
CMP				 #0 ;READ?  
BEQ				 IOSETUP ;=>YES  
* NOW REPEAT GOES LIKE OTHERS:  
*  
*  
CMD1			 EQU *  
CMP				 #1 ;WRITE?  
BNE				 CMD2 ;=>NOPE  
JMP				 IOSETUP ;=>YES  
CMD2			 EQU *  
CMP				 #2 ;STATUS?  
BNE				 CMD3 ;=>NOT STATUS  
LDA				 D.STATCODE ;IS IT 'SENSE'?  
BEQ				 GOSTAT ;=>YES  
LDA				 #XCTLCODE ;ILLEGAL CODE  
JMP				 EXIT  
GOSTAT			 EQU *  
JMP				 DRVSETUP ;=>YES  
*  
CMD3			 EQU *  
CMP				 #8 ;INIT?  
BNE				 BADOP ;=>NOPE  
JMP				 INIT ;=>YES, DO INIT  
*  
BADOP			 EQU *   
				LDA #XBADOP ;ILLEGAL COMMAND  
				JMP EXIT ;BACK TO YOU  
*     
BADCMD			 EQU *   
				LDA #XREQCODE ;INVALID COMMAND  
				JMP EXIT ;BACK TO YOU  
				PAGE    
* SETUP WHAT WE HAVE TO BEFORE   
* PERFORMING THE I/O OPERATION:   
*   
IOSETUP			 EQU *   
LDA				 D.BLOCK+1 ;VALIDATE BLOCKNUM  
BEQ				 CHKBYTE ;=> IF <256, IT'S OK  
CMP				 #2 ;IS IT <512?  
BCS				 BADBLOCK ;=>BAD BOY!  
LDA				 D.BLOCK ;YES, CHECK LO HALF  
CMP				 #280-256 ; FOR RANGE  
BCC				 CHKBYTE ;=>IT'S OK  
BADBLOCK		 EQU *   
LDA				 #XBLKNUM ;BAD BLOCK NUMBER  
JMP				 EXIT ;RETURN BAD NEWS  
*   
CHKBYTE			 EQU *   
LDA				 D.BYTES ;GET LO COUNT  
BNE				 BADCOUNT ;=>ERR, NOT INTEGRAL BLOCK(S)  
LDA				 D.BYTES+1 ;GET HI COUNT  
LSR				 A ;MAKE BLOCK COUNT  
BCS				 BADCOUNT ;=>BAD IF HALF-BLOCK COUNT  
STA				 BLKCOUNT ;SAVE COUNT OF BLOCKS  
*   
* DOES REQUESTED BYTECOUNT CAUSE US   
* TO RUN OFF END OF DISK?   
*   
LDA				 BLKCOUNT ;NO. ADD STARTBLOCK  
CLC				 ; AND BLKCOUNT AND SEE  
ADC				 D.BLOCK ; IF WE'RE TOO BIG  
LDX				 D.BLOCK+1 ;DID IT START OUT > 255?  
BNE				 BLKG255 ;=>YES  
BCC				 DRVSETUP ;=>DEFINITELY < 256  
BCS				 CHKLO ;=>IF CARRY,THEN >256  
BLKG255			 EQU *   
BCS				 BADCOUNT ;>255+CARRY IS NOW >511  
CHKLO			 EQU *   
CMP				 #280-256+1 ;281..511 ?  
BCC				 DRVSETUP ;=>NO, WE ARE OK  
BADCOUNT		 EQU *   
LDA				 #XBYTECNT ;ILLEGAL BYTECOUNT  
JMP				 EXIT ;SORRY...  
PAGE			   
*   
* SELECT THE APPROPRIATE DRIVE:   
*   
DRVSETUP		 EQU *   
LDA				 D.COMMAND ;SAVE THIS COMMAND  
STA				 PREVCMD ; AND DEVICE FOR  
LDA				 D.UNITNUM ; SUBSEQUENT  
STA				 PREVUNIT ; 'REPEAT' CALL  
LDA				 E.REG ;DOWNSHIFT TO  
ORA				 #$80 ; 1MHZ FOR REMAINDER  
STA				 E.REG ; OF DRIVER EXECUTION  
JSR				 UNITSEL ;SELECT & START IT  
*   
* SEE IF THE MOTOR STARTED. IF NOT,   
* THEN IT'S EITHER DISKSWITCH OR NODRIVE.   
*   
JSR				 CHKDRV ;MOTOR RUNNING?  
BNE				 DOIO ;=>YES, GREAT.  
*   
* IF WE GET A MOTOR WHEN WE MOVE   
* THE HEAD, THEN IT'S DISKSWITCH.   
*   
LDX				 D.UNITNUM ;FORCE HEAD MOTION  
INC				 DRVTRACK,X ; EVEN IF ALREADY ON ZERO  
INC				 DRVTRACK,X ;GIVE HIM A FIRM KNOCKER  
LDA				 #0 ;SEEK TO TRACK ZERO  
JSR				 MYSEEK ; FOR BFM DIR READ  
JSR				 CHKDRV ;RUNNING NOW?  
BNE				 DSWITCH ;=>YES, A SWITCHEROO  
LDA				 #0   
LDY				 D.UNITNUM ;FORGET THAT THIS  
				STA DRIVESEL,Y ; DRIVE WAS 'SELECTED'  
				LDA #XNODRIVE ;NO, A MISSING DRIVE!  
				JMP EXIT   
*     
DSWITCH			 EQU *   
				LDA #XDISKSW ;USER PULLED A FAST ONE  
				JMP EXIT ; BUT HE CAN'T FOOL US.  
				PAGE    
* PREPARE TO DO THE OPERATION:  
*  
DOIO			 EQU *   
				LDA D.BUFL ;COPY USER BUFFER  
				STA BUFTEMP ; AND BLOCK NUMBER  
				LDA D.BUFH ; TO OUR WORKSPACE  
				STA BUFTEMP+1   
				LDA $1400+D.BUFH   
				STA $1400+BUFTEMP+1   
				LDA D.BLOCK   
				STA BLKTEMP   
				LDA D.BLOCK+1   
				STA BLKTEMP+1   
*   
* IF CALLER GAVE US A COUNT OF ZERO BYTES,   
* THEN WE'RE ALL DONE!   
*   
LDA				 D.COMMAND ;IS IT STATUS?  
CMP				 #2 ;IF SO, THEN BYTECOUNT  
BNE				 DOIO2 ; IS MEANINGLESS  
JMP				 STATUS   
DOIO2			 EQU *   
LDY				 BLKCOUNT ;BLKS=0?  
BEQ				 READOK ;=>YES, YOU GET GOOD RETURN  
CMP				 #0 ;READ COMMAND?  
BEQ				 READREQ ;=>YES  
JMP				 WRITEREQ   
PAGE			   
REP				 40   
* -- READ --   
REP				 40   
READREQ			 EQU *   
LDA				 #0 ;CLEAR COUNT OF  
LDY				 #0   
STA				 (D.BYTRD),Y ; BYTES READ  
INY				   
STA				 (D.BYTRD),Y   
READREQ2		 EQU *   
JSR				 BLK2SECT ;COMPUTE TRK/SECTOR THIS BLOCK  
*   
JSR				 SECTORIO ;READ IT PLEASE  
BCS				 READERR ;=>WE LOSE.  
INC				 SECTOR ;BUMP TO NEXT  
INC				 SECTOR ; LOGICAL SECTOR  
INC				 BUF+1 ;BUMP SECTOR BUFFER  
JSR				 SECTORIO ;READ IT TOO  
BCS				 READERR ;=>WE LOSE.  
LDY				 #1   
LDA				 (D.BYTRD),Y ;BUMP COUNT OF  
CLC				   
ADC				 #2   
STA				 (D.BYTRD),Y ; BYTES READ  
*   
* MORE BLOCKS TO GO?   
*   
JSR				 MOREBLKS ;SETUP FOR NEXT BLOCK  
BNE				 READREQ2 ;=>MORE TO READ...  
READOK			 EQU *   
LDA				 #0 ;GOOD RETURN  
JMP				 EXIT ;TELL HAPPY USER  
*   
READERR			 EQU *   
JMP				 EXIT ;RETURN ERROR CODE  
CHN				 DISK3.WRT.SRC   
				  
*************************************************************************  
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.MAIN.SRC  
*************************************************************************  
				 
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13\sos.s.disk3.main.txt
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
