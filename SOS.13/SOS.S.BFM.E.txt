NEW
  AUTO 3,1
*--------------------------------------
*   
* CONSTANTS   
*   
DLIMIT			 .EQ $2F 				; DELIMITER IS CURRENTLY AN ASCII '/'  
SEEDTYP			 .EQ 1   				
SAPTYP			 .EQ 2   				
TRETYP			 .EQ 3   				
DIRTYP			 .EQ $D  				 
HEDTYP			 .EQ $E  				 
RDCMD			 .EQ $0  				 
WRTCMD			 .EQ $1  				 
RPTCMD			 .EQ $9  				 
STATCMD			 .EQ $02 				; REQUEST STATUS OF BLOCK DEVICE. (BIT 0 = WRITE PROTECTED)  
STATSUB			 .EQ $0  				 
PRETIME			 .EQ $20 				; COMMAND NEEDS CURRENT DATE/TIME STAMP  
PREREF			 .EQ $40 				; COMMAND REQUIRES FCB ADDRESS AND VERIFICATION  
PREPATH			 .EQ $80 				; COMMAND HAS PATHNAME TO PREPROCESS  
*     
* VOLUME STATUS CONSTANTS (BITS)   
*   
DSWITCH			 .EQ $40 ; FOR DISK SWITCHED ERROR RECOVERY.  
*   
* FILE STATUS CONSTANTS   
*   
DATALC			 .EQ $1 				; DATA BLOCK NOT ALLOCATED.  
IDXALC			 .EQ $2 				; INDEX NOT ALLOCATED  
TOPALC			 .EQ $4 				; TOP INDEX NOT ALLOCATED  
STPMOD			 .EQ $8 				; STORAGE TYPE MODIFIED  
USEMOD			 .EQ $10 				; FILE USAGE MODIFIED  
EOFMOD			 .EQ $20 				; END OF FILE MODIFIED  
DATMOD			 .EQ $40 				; DATA BLOCK MODIFIED  
IDXMOD			 .EQ $80 				; INDEX BLOCK MODIFIED  
FCBMOD			 .EQ $80 				; HAS FCB/DIRECTORY BEEN MODIFIED? (FLUSH)  
*   
* FILE ATTRIBUTES CONSTANTS   
*   
READEN			 .EQ $1 				; READ ENABLED  
WRITEN			 .EQ $2 				; WRITE ENABLED  
NLINEN			 .EQ $10 				; NEW LINE ENABLED  
BKBITVAL		 .EQ $20 				; FILE NEEDS BACKUP IF SET (BKBITFLG)  
RENAMEN			 .EQ $40 				; RENAME OK WHEN ON.  
DSTROYEN		 .EQ $80 				; DESTROY OK WHEN ON.  
PAGE			   
* HEADER INDEX CONSTANTS   
*   
HNLEN			 .EQ $0 				; HEADER NAME LENGTH (OFFSET INTO HEADER)  
*HNAME .EQ $1 ; HEADER NAME   
HPENAB			 .EQ $10 				; PASSWORD ENABLE BYTE  
HPASS			 .EQ $11 				; ENCODED PASSWORD  
HCRDT			 .EQ $18 				; HEADER CREATION DATE  
* HCRTM .EQ $1A ; HEADER CREATION TIME   
HVER			 .EQ $1C 				; SOS VERSION THAT CREATED DIRECTORY  
HCMP			 .EQ $1D 				; BACKWARD COMPATIBLE WITH SOS VERSION  
HATTR			 .EQ $1E 				; HEADER ATTRIBUTES- PROTECT ETC.  
* HENTLN .EQ $1F ; LENGTH OF EACH ENTRY 000133 * HMENT .EQ $20 ; MAXIMUM NUMBER OF ENTRIES/BLOCK  
HCENT			 .EQ $21 				; CURRENT NUMBER OF FILES IN DIRECTORY  
HRBLK			 .EQ $23 				; OWNER'S DIRECTORY ADDRESS  
HRENT			 .EQ $25 				; OWNER'S DIRECTORY ENTRY NUMBER  
HRELN			 .EQ $26 				; OWNER'S DIRECTORY ENTRY LENGTH  
VBMAP			 .EQ HRBLK   
VTBLK			 .EQ HRENT 				; (USED FOR ROOT DIRECTORY ONLY)  
*     
* VOLUME CONTROL BLOCK INDEX CONSTANTS  
*  
VCBSIZE			.EQ $20 				; CURRENT VCB IS 32 BYTES PER ENTRY (VER 0)  
VCBNML			.EQ 0 					; VOLUME NAME LENGTH BYTE  
VCBNAM			.EQ 1 					; VOLUME NAME  
VCBDEV			.EQ $10 				; VOLUME'S DEVICE  
VCBSTAT			.EQ $11 				; VOLUME STATUS. (80=FILES OPEN. 40=DISK SWITCHED.)  
VCBTBLK			.EQ $12 				; TOTAL BLOCKS ON THIS VOLUME  
VCBTFRE			.EQ $14 				; NUMBER OF UNUSED BLOCKS  
VCBROOT			.EQ $16 				; ROOT DIRECTORY (DISK) ADDRESS  
*VCBMORG 		.EQ $18 				; MAP ORGANIZATION (NOT SUPPORTED BY V 0)  
*VCBMBUF 		.EQ $19 				; BIT MAP BUF NUM  
VCBDMAP			.EQ $1A 				; FIRST (DISK) ADDRESS OF BITMAP(S)  
VCBCMAP			.EQ $1C 				; RELATIVE ADDRESS OF BIT MAP WITH SPACE (ADD TO VCBDMAP)  
*VCBMNUM 		.EQ $1D 				; RELATIVE BIT MAP CURRENTLY IN MEMORY  
VCBOPNC			.EQ $1E 				; CURRENT NUMBER OF OPEN FILES.  
*ADR/16
VCBSWAP 		.EQ $1F 				; $8X IF VOLUME SWAPPED; $00 IF UNSWAPPED WHERE X=LOW ORDER BYTE OF VCB  
*   
* FILE CONTROL BLOCK INDEX CONSTANTS   
*   
FCBREFN			.EQ 0 					; FILE REFERENCE NUMBER (POSITION SENSITIVE)  
FCBDEVN			.EQ 1 					; DEVICE (NUMBER) ON WHICH FILE RESIDES  
*FCBHEAD 		.EQ 2 					; BLOCK ADDRESS OF FILE'S DIRECTORY HEADER 000164 *FCBDIRB .EQ 4 ; BLOCK ADDRESS OF FILE'S DIRECTORY  
FCBENTN			.EQ 6 					; ENTRY NUMBER WITHIN DIRECTORY BLOCK  
FCBSTYP			.EQ 7 					; STORAGE TYPE - SEED, SAPLING, TREE, ETC.  
FCBSTAT			.EQ 8 					; STATUS - INDEX/DATA/EOF/USAGE/TYPE MODIFIED.  
FCBATTR			.EQ 9 					; ATTRIBUTES - READ/WRITE ENABLE, NEWLINE ENABLE.  
FCBNEWL			.EQ $A 					; NEW LINE TERMINATOR (ALL 8 BITS SIGNIFICANT).  
FCBBUFN			.EQ $B 					; BUFFER NUMBER  
FCBFRST			.EQ $C 					; FIRST BLOCK OF FILE  
FCBIDXB			.EQ $E 					; BLOCK ADDRESS OF INDEX (0 IF NO INDEX)  
FCBDATB			.EQ $10 				; BLOCK ADDRESS OF DATA  
FCBMARK			.EQ $12 				; CURRENT FILE MARKER.  
FCBEOF			.EQ $15 				; LOGICAL END OF FILE.  
FCBUSE			.EQ $18 				; ACTUAL NUMBER OF BLOCKS ALLOCATED TO THIS FILE.  
FCBSWAP			.EQ $1A 				; $8N = SWAPPED, $00 = UNSWAPPED VOLUME ("N" = VCB ENTRY NUMBER)  
FCBLEVL			.EQ $1B 				; LEVEL AT WHICH THIS FILE WAS OPENED  
FCBDIRTY		.EQ $1C 				; FCB MARKED AS MODIFIED  
 
*  
* ZERO PAGE STUFF  
*  
PAR				 .EQ $A0   
COMMAND			 .EQ PAR   
C.DNAMP			 .EQ PAR+1   
C.PATH			 .EQ PAR+1   
C.REFNUM		 .EQ PAR+1   
C.ISNEWL		 .EQ PAR+2   
C.OUTEOF		 .EQ PAR+2   
C.BASE			 .EQ PAR+2   
C.MRKPTR		 .EQ PAR+2   
C.OUTBUF		 .EQ PAR+2   
C.NWPATH		 .EQ PAR+3   
C.FILIST		 .EQ PAR+3   
C.NEWL			 .EQ PAR+3   
C.OUTVOL		 .EQ PAR+3   
C.OUTREF		 .EQ PAR+3   
C.XLIST			 .EQ PAR+3   
C.MAXPTH		 .EQ PAR+3   
C.MARK			 .EQ PAR+3   
C.NEWEOF		 .EQ PAR+3   
C.BYTES			 .EQ PAR+4   
C.FILSTLN		 .EQ PAR+5   
C.OUTBLK		 .EQ PAR+5   
C.OPLIST		 .EQ PAR+5   
C.XLEN			 .EQ PAR+5   
C.FILID			 .EQ PAR+6   
C.OUTCNT		 .EQ PAR+6   
C.OPLSTLN		 .EQ PAR+7   
C.AUXID			 .EQ PAR+7   
C.STOR			 .EQ PAR+9   
C.EOFLL			 .EQ PAR+$A   
C.EOFLH			 .EQ PAR+$B   
C.EOFHL			 .EQ PAR+$C   
DEBUPTR			 .EQ PAR+$D 			; NOTE SAME AS BELOW  
C.EOFHH			 .EQ PAR+$D   
* C.SPARE .EQ PAR+$E 000219 *  
DEVICE			 .EQ $C0   
DHPCMD			 .EQ DEVICE   
UNITNUM			 .EQ DEVICE+1   
DSTATREQ		 .EQ DEVICE+2   
DBUFPL			 .EQ DEVICE+2   
DBUFPH			 .EQ DBUFPL+1   
DSTATBFL		 .EQ DEVICE+3 			; TO PASS BACK BUSY, WRITE PROTECT, READ PROTECT.  
DSTATBFH		 .EQ DSTATBFL+1   
RQCNTL			 .EQ DEVICE+4   
RQCNTH			 .EQ RQCNTL+1   
BLOKNML			 .EQ DEVICE+6   
BLOKNMH			 .EQ BLOKNML+1   
BRDPTR			 .EQ DEVICE+8 			; (AND 9)  
*     			
DVNAMP			 .EQ DEVICE+1 			; USED FOR 'VOLUME' TO CALL  
DVDNUM			 .EQ DEVICE+3 			; 'GET.DNUM' IN DEVICE MANAGER.  
*     
SISBPH			 .EQ SISTER+DBUFPH   
SISDSTAT		 .EQ SISTER+DSTATBFH   
SSBRDPH			 .EQ SISTER+BRDPTR+1   
*     
* ZERO PAGE TEMPORARIES    
*     
ZTEMPS			 .EQ $B0   
PATHNML			 .EQ ZTEMPS   
PATHNMH			 .EQ PATHNML+1   
USRBUF			 .EQ ZTEMPS   
TPATH			 .EQ ZTEMPS+2   
WRKPATH			 .EQ ZTEMPS+4   
TINDX			 .EQ ZTEMPS+2   
DRBUFPL			 .EQ ZTEMPS+4   
DRBUFPH			 .EQ DRBUFPL+1   
VCBPTR			 .EQ ZTEMPS+6   
BMADR			 .EQ ZTEMPS+8   
FCBPTR			 .EQ ZTEMPS+$A   
DATPTR			 .EQ ZTEMPS+$C   
POSPTR			 .EQ ZTEMPS+$E   
*     
MAXTEMPS		 .EQ $F   
SISTEMPS		 .EQ SISTER+ZTEMPS   
SSTIDXH			 .EQ SISTER+TINDX+1   
SISPATH			 .EQ SISTER+C.PATH+1   
SSNWPATH		 .EQ SISTER+C.NWPATH+1   
SISUSRBF		 .EQ SISTER+USRBUF+1   
SISOUTBF		 .EQ SISTER+C.OUTBUF+1   
SISTPATH		 .EQ SISTER+TPATH+1   
SISBMADR		 .EQ SISTER+BMADR+1   
SISFCBP			 .EQ SISTER+FCBPTR+1   
SISDATP			 .EQ SISTER+DATPTR+1   
SISPOSP			 .EQ SISTER+POSPTR+1   
*     
*     
* ADDRESSES     
*     
PATHBUF			 .EQ $1000 				; NOTE: THIS IS $100 BYTES LONG.  
VCB				 .EQ $1100   
GBUF			 .EQ $1200 				; THRU $13FF  
*     
* INITIALIZATION EQUATES    
*    
BFMFCB1			 .EQ $1C				; FCB PAGE 1 ADDR  
BFMFCB2			 .EQ $1D 				; FCB PAGE 2 ADDR  
BMAPAGE			 .EQ $B8	 			; BIT MAP A ADDR  
BMBPAGE			 .EQ $BA	 			; BIT MAP B ADDR  
FCBZPP			 .EQ FCBPTR   
*    
*    
    			.DUMMY
				.OR	0 					; (THE FOLLOWING DO NOT NEED TO BE ON ZERO PAGE. 7/16/80 JRH.)  
DATBLKL			.BS 1   
DATBLKH			.BS 1   
IDXADRL			.BS 1 					; DISK ADDRESS OF INDEX BLOCK  
IDXADRH			.BS 1   
REQL			.BS 1   
REQH			.BS 1   
INDXBLK			.BS 1   
LEVELS			.BS 1   
TOTENT			.BS 1   
ENTCNTL			.BS 1   
ENTCNTH			.BS 1   
CNTENT			.BS 1   
NOFREE			.BS 1   
BMCNT			.BS 1   
SAPTR			.BS 1   
TREPTR			.BS 1   
TLINK			.BS 2   
FLINK			.BS 2   
PATHCNT			.BS 1   
PFIXPTR			.BS 2   
BMPTR			.BS 1   
BASVAL			.BS 1   
HALF			.BS 1   
*    
* BIT MAP INFO TABLES (A & B)  
*  
BMTABSZ			.EQ $6   
BMTAB			.BS 1   
BMBUFBNK		.BS 1   
BMASTAT			.BS 1   
BMADEV			.BS 1   
BMAMADR			.BS 1   
BMADADR			.BS 2   
BMACMAP			.BS 1 					; SIMILAR TO VCBCMAP  
BMBSTAT			.BS 1 					  
BMBDEV			.BS 1 					  
BMBMADR			.BS 1 					  
				.BS 2 					; BMBDADR  
				.BS 1 					; BMBCMAP  
*     					
FCBADDRH		.BS 1 					; FILE CONTROL BLOCK'S BUFFER ADDRESS.  
FCBANKNM		.BS 1 					; AND BANK (SISTER PAGE) BYTE.  
TPOSLL			.BS 1 					  
TPOSLH			.BS 1 					  
TPOSHI			.BS 1 					  
RWREQL			.BS 1 					  
RWREQH			.BS 1 					  
BULKCNT			.BS 1 					  
NLCHAR			.BS 1 					  
NPATHDEV		.BS 3 					; FOR NEW PATHNAME DEVICE AND DIRECTORY HEADER ADDRESS  
IOACCESS		.BS 1 					; USED TO DETERMINE IF A CALL HAS BEEN MADE TO THE DISK DEVICE HANDLER  
DEVNUM			.BS 1 					; CURRENT DEVICE TO BE ACCESSED.  
TOTDEVS			.BS 1 					; USED FOR ACCESSING DRIVES IN NUMERIC ORDER  
CMDTEMP			.BS 1 					; USED FOR TESTING REFNUM, TIME, AND DSKSWTCH (PRE)PROCESSING.  
DATELO			.BS 1 					; DATE AND TIME MUST RESIDE ON ZERO PAGE.  
DATEHI			.BS 1 					  
TIMELO			.BS 1 					  
TIMEHI			.BS 1 					  
*               .BS					
DUPLFLAG		.BS 1 					; USED FOR DIFFERENCE BETWEEN VNFERR AND DUPVOL BY SYNPATH  
ZPGTEMP			.BS 1 					; A ONE-BYTE UNSTABLE TEMPORARY  
VCBENTRY		.BS 1 					; POINTER TO CURRENT VCB ENTRY  
*     
				.ED
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13/sos.s.bfm.e
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
