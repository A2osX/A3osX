NEW
  AUTO 3,1
*--------------------------------------
*************************************************************************  
* APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.SUBS.SRC  
*************************************************************************  
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT  
				 
PAGE			  
REP				 40  
* NAME : CHKDRV  
* FUNCTION: CHECK IF MOTOR(S) RUNNING  
* INPUT : NONE  
* RETURNS : 'BNE' IF RUNNING  
* : 'BEQ' IF NOT  
* DESTROYS: AC,X  
REP				 40  
* NOTES: DUE TO A FLOATING PIN, THERE  
* COULD BE A GLITCH WHICH CAUSES THE  
* SHIFTER TO 'FLASH' ONTO THE BUS  
* INSTEAD OF ALWAYS BEING TRISTATED.  
* THIS COULD CAUSE CHKDRV TO THINK  
* THAT THE MOTOR IS SPINNING WHEN IT  
* IS NOT. THUS WE WILL SAMPLE THE SHIFTER  
* FOR 40 US AT 6-US INTERVALS. IF, AFTER  
* THREE (3) CONSECUTIVE PASSES, ANY OF  
* THE PASSES SEES A 'LOCKED' SHIFTER,  
* THEN WE SAY THE DRIVE IS STOPPED.  
*  
*  
CHKDRV			 EQU *  
LDX				 #3 ;CHECK SHIFTER SEVERAL TIMES  
CHKD1			 EQU *  
LDA				 Q6L+$60 ;GET DATA  
CMP				 Q6L+$60 ;HAS IT CHANGED?  
BNE				 CHANGED ;=>YES  
CMP				 Q6L+$60 ;HAS IT CHANGED?  
BNE				 CHANGED ;=>YES  
CMP				 Q6L+$60 ;HAS IT CHANGED?  
BNE				 CHANGED ;=>YES  
CMP				 Q6L+$60 ;HAS IT CHANGED?  
BNE				 CHANGED ;=>YES  
CMP				 Q6L+$60 ;HAS IT CHANGED?  
BNE				 CHANGED ;=>YES  
CMP				 Q6L+$60 ;HAS IT CHANGED?  
BNE				 CHANGED ;=>YES  
CMP				 Q6L+$60 ;HAS IT CHANGED?  
BNE				 CHANGED ;=>YES  
RTS				 ;IF EVER LOCKED, IT'S STOPPED  
*  
CHANGED			 EQU *  
DEX				  
BNE				 CHKD1 ;TRY SEVERAL TIMES  
DEX				 ;SET CC=BNE  
RTS				 ;RETURN ZFLAG APPROPRIATELY  
PAGE			  
000055			 000056 REP 40 NAME : ADDTIME FUNCTION: ADD TO MOTOR UPTIME(S)  
* INPUT : AC=NO. OF 25 MS INCREMENTS  
* DESTROYS: Y  
				REP 40   
*     
ADDTIME			 EQU *   
				PHA  ;PRESERVE AC  
				LDY #4 ;TABLE INDEX/COUNT  
ADD2			 EQU *   
				LDA DRIVESEL-1,Y ;IS IT SELECTED?  
				BEQ ADD3 ;=>NOPE  
				PLA    
				PHA  ;RECOVER DELTA-T  
				CLC    
				ADC UPTIME-1,Y ;ADD TO MOTOR UPTIME  
				CMP #T1SEC+2 ;IS IT AT MAX TIME?  
				BCC ADD2A ;=>NO, STORE NEW TIME  
				LDA #T1SEC+1 ;YES, SET TO >1 SEC  
ADD2A			 EQU *   
				STA UPTIME-1,Y   
ADD3			 EQU *   
DEY				    
BNE				 ADD2 ;=>DO ALL 4 DRIVES  
*    
PLA				  ;RESTORE AC  
RTS				    
PAGE			    
REP				 40   
* NAME : RECAL    
* FUNCTION: RECALIBRATE DRIVE HEAD  
* INPUT : NONE  
* DESTROYS: ALL REGISTERS  
* NOTE : A 'QUIET' RECALIBRATE IS DONE  
* : USING TWO ITERATIONS. IF WE ARE  
* : LOST, THEN SEEK 48-TRACKS  
* : TOWARD TRACK ZERO. IF WE KNOW  
* : WHAT TRACK WE'RE CURRENTLY  
* : ON (+- 1/2 TRACK), THEN JUST  
* : ADD A LITTLE EXTRA AND SEEK  
* : TO TRACK ZERO. A 48-TRACK  
* : SEEK WILL ALWAYS GET US BACK  
* : ONTO THE MEDIA, EVEN IF WE  
* : WERE "OFF THE CAM". FROM THAT  
* : POINT, THE 2ND SEEK GETS US  
* : BACK TO TRACK ZERO QUIETLY.  
				REP 40   
*     
RECAL			 EQU *   
				LDA #2 ;TWO ITERATIONS, PLEASE  
RECAL1			 EQU *   
				PHA  ;SAVE LOOPCOUNT  
				LDX #$60 ;SETUP SLOT FOR CORE RTNS  
				JSR RDADR ;WHERE ARE WE?  
				BCC RECAL2 ;=>NOW WE KNOW  
				JSR RDADR ;GIVE SECOND SHOT  
				BCC RECAL2 ;=>THAT GOT IT  
				LDA #48 ;LOST? TRY 48-TRACK SEEK  
				JMP RECAL3   
RECAL2			 EQU *   
				LDA CSSTV+2 ;HERE'S WHERE WE ARE  
				CLC  ;ADD SOME SO WE GET A  
				ADC #3 ; HARDER SEEK TO ZERO  
RECAL3			 EQU *   
				LDY D.UNITNUM ;THIS IS NOW WHERE  
				STA DRVTRACK,Y ; WE ARE  
				JSR FIXIRQ ;ENABLE IRQ IF OK  
*     
				LDA #0 ;DESTINATION TRACK IS 00  
				STA MONTIMEH ;CLEAR MOTOR-UP TIME SO  
				STA MONTIMEL ; SEEK KNOWS HOW LONG RECAL TAKES  
				JSR MYSEEK ;=>SLAM IT BACK!  
				PLA  ;HAVE WE DONE IT TWICE?  
				TAY    
				DEY    
				TYA    
				BNE RECAL1 ;=>DO TWO ITERATIONS  
				RTS    
				PAGE    
				REP 40   
* NAME : SEEKDSK3    
* FUNCTION: SEEK CURRENT DRIVE   
* INPUT : AC=DESTINATION TRACK   
* OUTPUT : NONE   
* DESTROYS: ALL REGISTERS   
* NOTE : MUST BE CALLED WHILE   
* : MOTOR IS RUNNING, IN   
* : 1MHZ+ROM+IO MODE   
REP				 40   
SEEKDSK3		 EQU *   
LDY				 PREVUNIT ;GET DRIVENUM  
STY				 D.UNITNUM ;SET IT UP  
JSR				 MYSEEK ;MOVE IT!  
RTS				   
REP				 40   
* NAME : MYSEEK   
* FUNCTION: SEEK TO DESIRED TRACK   
* INPUT : AC=DESTINATION TRACK   
* DESTROYS: ALL REGISTERS   
REP				 40   
MYSEEK			 EQU *   
STA				 TRKN ;TEMP HOLD OF AC  
LDY				 D.UNITNUM ;GET DRIVENUM  
LDA				 DRVTRACK,Y ;SETUP CURRENT TRACK  
ASL				 A ;SET IN HALFTRACKS FOR SEEK  
STA				 CURTRK ; FOR SEEK ROUTINE  
LDX				 #$60 ;SET UP SLOT FOR CORE RTNS  
LDA				 MONTIMEH ;GET STARTING MOTOR TIME  
STA				 TEMP   
*   
* NOTE: IRQ'S WHICH SUSPEND SEEK MAY CAUSE A   
* SEEK FAILURE. WE WILL HAVE TO RECALIBRATE   
* SINCE WE WON'T BE ON-TRACK. WE CAN NOT GET   
* ON A HALFTRACK SINCE SEEK ALLOWS SETTLING   
* TIME OF THE PHASE. BECAUSE VBL IS A SERIOUS   
* OFFENDER, WE INHIBIT HIM.   
*   
PHP				 ;INHIBIT IRQ WHILE  
SEI				 ; MESSING WITH VBL FLAGS  
LDA				 E.IER   
AND				 #$18   
STA				 VBLSAVE   
STA				 E.IER   
PLP				 ;RESTORE IRQ STATUS  
LDA				 TRKN ;RESTORE DESTINATION TRACK  
STA				 DRVTRACK,Y ;DEST IS NOW CURRENT  
ASL				 A ;MAKE IT IN HALFTRACKS  
JSR				 SEEK ;GO MOVE THE HEAD...  
LDA				 VBLSAVE ;NOW ALLOW THAT  
ORA				 #$80 ; NASTY  
STA				 E.IER ; VBL INTERRUPT  
*   
* COMPUTE THE TIME USED BY SEEK:   
*   
LDA				 MONTIMEH ;INCLUDE SEEKTIME IN  
SEC				   
SBC				 TEMP   
JSR				 ADDTIME ; TOTAL MOTOR UPTIME(S)  
RTS				   
PAGE			   
REP				 40   
* NAME : BLK2SECT  
* FUNCTION: COMPUTE TRACK/SECTOR FOR A BLOCK   
* AND ADJUST BUFFER ADDRESS   
* INPUT : D.BLOCK, D.BUF   
* OUTPUT : TRACK, SECTOR, D.BUF   
* DESTROYS: AC,Y   
REP				 40   
*   
BLK2SECT		 EQU *   
LDA				 BLKTEMP+1 ;GET HI BLK HALF  
ROR				 A ;MOVE LO BIT TO CARRY  
LDA				 BLKTEMP ;GET LO HALF  
ROR				 A ;COMBINE WITH HI BIT  
LSR				 A   
LSR				 A ;FINISH OFF DIVIDE-BY-8  
STA				 TRACK ;THAT'S THE TRACK  
LDA				 BLKTEMP ;GET LO HALF AGAIN  
AND				 #7   
TAY				   
LDA				 SECTABLE,Y ;GET START SECTOR  
STA				 SECTOR   
*   
* ADJUST BUFFER ADDRESS SO THAT I/O   
* WON'T WRAPAROUND IN THE BANK:   
* (THIS ALGORITHM RIPPED OFF FROM 1.0)   
*   
LDA				 BUFTEMP+1 ;GET BUFFER HI ADDRESS  
LDY				 $1400+BUFTEMP+1 ; AND XTND BYTE  
CMP				 #$82 ;IF RAM ADDR >=8200 THEN BUMP TO  
BCC				 NOADJ ; NEXT BANK PAIR  
CPY				 #$80   
BCC				 NOADJ ;=>NOT USING BANKPAIR  
CPY				 #$8F ;SPECIAL BANK 0?  
BEQ				 NOADJ ;=>YES  
AND				 #$7F ;DROP HI ADDRESS AND  
STA				 BUFTEMP+1 ; BUMP BANK NUMBER  
INC				 $1400+BUFTEMP+1   
*   
NOADJ			 EQU *   
LDA				 BUFTEMP+1 ;COPY BUFFER ADDRESS  
STA				 BUF+1 ; FOR PRE & POSTNIB  
LDA				 BUFTEMP   
STA				 BUF   
				LDA $1400+BUFTEMP+1  
				STA $1400+BUF+1  
				RTS   
*    
SECTABLE		 DFB $00,$04,$08,$0C,$01,$05,$09,$0D  
				PAGE   
				REP 40  
000247			 NAME : MOREBLKS FUNCTION: SETUP TO DO NEXT BLOCK  
* INPUT : NONE  
* RETURNS : 'BNE' IF MORE TO DO  
* : 'BEQ' IF NO MORE TO DO  
* DESTROYS:NOTHING  
REP				 40  
*  
MOREBLKS		 EQU *   
				INC BUFTEMP+1 ;BUMP BUFFER ADDRESS  
				INC BUFTEMP+1   
				INC BLKTEMP ;BUMP BLOCK NUMBER  
				BNE MORE2   
				INC BLKTEMP+1   
MORE2			 EQU *   
				DEC BLKCOUNT ;MORE BLOCKS TO GO?  
				RTS  ;RETURN RESULT OF DEC  
				SKP 4   
				REP 40   
* NAME : FIXIRQ    
* FUNCTION: ENABLE IRQ IF APPROPRIATE  
* INPUT : NONE  
* DESTROYS: NOTHING  
				REP 40   
*     
FIXIRQ			 EQU *   
				PHA    
				LDA IRQMASK ;SHOULD IRQ BE ENABLED?  
				BMI FIXRET ;=>NO, LEAVE IT ALONE  
				CLI  ;ENABLE IRQ  
FIXRET			 EQU *   
				PLA    
				RTS    
				    
				CHN DISK3.DATA.SRC   
				    
*************************************************************************  
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.SUBS.SRC  
*************************************************************************  
				 
				 
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13\sos.s.disk3.subs.txt
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
