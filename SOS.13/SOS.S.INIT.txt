NEW
  AUTO 3,1
*--------------------------------------
*************************************************************************  
* APPLE /// SOS 1.3 SOURCE CODE FILE: INIT.SRC  
*************************************************************************  
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT  
				 
SBTL			 "SOS 1.1 INITIALIZATION"  
REL				  
INCLUDE			 SOSORG,6,1,254  
ORG				 ORGINIT  
ZZORG			 EQU *  
MSB				 OFF  
REP				 100  
* COPYRIGHT (C) APPLE COMPUTER INC. 1981  
* ALL RIGHTS RESERVED  
REP				 100  
*  
* SOS INIT MODULE (VERSION = 1.1O )  
* (DATE = 8/04/81)  
*  
REP				 100  
*  
ENTRY			 INT.INIT  
ENTRY			 EVQ.INIT  
ENTRY			 CLK.INIT  
ENTRY			 MMGR.INIT  
ENTRY			 BMGR.INIT  
ENTRY			 DMGR.INIT  
ENTRY			 CFMGR.INIT  
ENTRY			 BFM.INIT  
*  
* EXTERNAL SUBROUTINES & DATA  
*  
EXTRN			 SXPAGE  
EXTRN			 SYSDEATH  
*  
* INTERRUPT SYSTEM INITIALIZATION  
*  
EXTRN			 COLDSTRT  
EXTRN			 IRQ.RCVR  
EXTRN			 NMI.RCVR  
EXTRN			 NMIFLAG  
EXTRN			 SIRTABLE  
EXTRN			 SIRTBLSIZ  
EXTRN			 ZPGSTACK  
EXTRN			 ZPGSTART  
*  
* EVENT QUEUE INITIALIZATION  
*  
EXTRN			 EV.QUEUE  
EXTRN			 EVQ.LEN  
EXTRN			 EVQ.CNT  
EXTRN			 EVQ.SIZ  
EXTRN			 EVQ.FREE  
EXTRN			 EVQ.LINK  
*  
* CLOCK INITIALIZATION  
*  
EXTRN			 PCLOCK  
*  
* CHARACTER FILE MANAGER INITIALIZATION  
*  
EXTRN			 CFCB.MAX  
EXTRN			 CFCB.DEV  
*  
* DEVICE MANAGER INITIALIZATION  
*  
EXTRN			 DMGR  
EXTRN			 MAX.DNUM  
*  
000071			 * BUFFER MANAGER INITIALIZATION *  
EXTRN			 BUF.CNT  
EXTRN			 PGCT.T  
EXTRN			 XBYTE.T  
EXTRN			 BUFREF  
*   
* MEMORY MANAGER INITIALIZATION  
*  
EXTRN			 ST.CNT  
EXTRN			 ST.ENTRY  
EXTRN			 ST.FREE  
EXTRN			 ST.FLINK  
EXTRN			 VRT.LIM  
EXTRN			 MEMSIZE  
EXTRN			 MEM2SML  
*  
* BLOCK FILE MANAGER INITIALIZATION  
*  
EXTRN			 FCBZPP  
EXTRN			 PATHBUF  
EXTRN			 VCB  
EXTRN			 WORKSPC  
EXTRN			 PFIXPTR  
EXTRN			 FCBADDRH  
EXTRN			 BMAPAGE  
EXTRN			 BMBPAGE  
EXTRN			 BMAMADR  
EXTRN			 BMBMADR  
EXTRN			 BFMFCB1  
EXTRN			 BFMFCB2  
*  
* CONSTANT DECLARATIONS  
*  
TRUE			 EQU $80  
FALSE			 EQU $00  
BITON6			 EQU $40  
BITON7			 EQU $80  
*    
* SYSTEM CONTROL REGISTERS
*
E.REGEQU$FFDF;ENVIRONMENT	 REGISTER
Z.REGEQU$FFD0;ZERO	 PAGE REGISTER
SBTL			 "INTERRUPT SYSTEM INITIALIZATION"  
*   
* 6522 REGISTERS   
*   
D.DDRB			 EQU $FFD2  
D.DDRA			 EQU $FFD3  
D.ACR			 EQU $FFDB  
D.PCR			 EQU $FFDC  
D.IFR			 EQU $FFDD  
D.IER			 EQU $FFDE  
E.IORB			 EQU $FFE0  
E.DDRB			 EQU $FFE2  
E.DDRA			 EQU $FFE3  
E.ACR			 EQU $FFEB  
E.PCR			 EQU $FFEC  
E.IFR			 EQU $FFED  
E.IER			 EQU $FFEE  
ACIASTAT		 EQU $C0F1  
*   
*   
REP				 60  
*   
* THIS SUBROUTINE INITIALIZES THE INTERRUPT SYSTEM.  
* ALL HARDWARE INTERRUPTS ARE MASKED AND THE  
* INTERRUPT ALLOCATION TABLE IS CLEARED.  
*  
REP				 60  
*  
*  
INT.INIT		 EQU *  
SEI				 ;DISABLE INTERRUPTS  
LDA				 #>ZPGSTART ;SET UP MIH  
STA				 ZPGSTACK ; ZERO PAGE STACK POINTER  
*  
LDA				 E.REG ;SELECT $C000 I/O SPACE  
PHA				 ; AND SET 1 MHZ  
ORA				 #BITON7+BITON6  
STA				 E.REG  
*  
STA				 ACIASTAT ;RESET ACIA  
*  
LDA				 #$FF ;SET UP 6522 D  
STA				 D.DDRB  
STA				 D.DDRA  
LDA				 #$00  
				STA D.ACR   
				LDA #$76   
				STA D.PCR   
				LDA #$7F   
				STA D.IFR   
				STA D.IER   
				LDA #$82   
				STA D.IER   
*     
				LDA #$3F ;SET UP 6522 E  
				STA E.DDRB   
				LDA #$0F   
				STA E.DDRA   
				LDA #$00   
				STA E.ACR   
				LDA #$63   
				STA E.PCR   
				LDA #$7F   
				STA E.IFR   
				STA E.IER   
*     
				LDA #$FF   
				STA E.IORB ;SOUND PORT  
				BIT $C0D8 ;DISABLE GRAPHICS SCROLL  
				BIT $C0DA ;DISABLE CHARACTER DOWNLOAD  
				BIT $C0DC ;DISABLE ENSEL  
				BIT $C0DE ;SET ENSIO FOR INPUT  
*     
				PLA  ;RESTORE E REGISTER  
				STA E.REG   
*     
				LDA #FALSE   
				STA NMIFLAG ;CLEAR NMI WAIT FLAG  
				LDY #>SIRTBLSIZ-1   
INTI010			 STA SIRTABLE,Y ; ALLOCATION TABLE  
				DEY    
				BPL INTI010   
				LDA #TRUE   
				STA SIRTABLE+$0A ;LOCK DOWN ANY SLOT SIR  
*     
				LDX #$05   
INTI020			 LDA RAMVECT,X ;SET UP VECTORS  
				STA $FFFA,X ; AT $FFFA - $FFFF  
				LDA RAMJMPS,X ;SET UP JMP INSTRUCTIONS  
				STA $FFCA,X ; AT $FFCA - $FFCF  
				DEX    
				BPL INTI020   
				RTS    
*     
RAMVECT			 DW NMI.RCVR  
				DW COLDSTRT  
				DW IRQ.RCVR  
RAMJMPS			 JMP NMI.RCVR  
				JMP IRQ.RCVR  
				SBTL "EVENT QUEUE INITIALIZATION"  
				REP 60  
*  
* THIS SUBROUTINE INITIALIZES THE EVENT QUEUE. ALL ENTRIES  
* ARE CLEARED AND LINKED INTO THE FREE LIST. THE ACTIVE  
* LIST IS EMPTY.  
*  
REP				 60  
*  
*  
EVQ.INIT		 EQU *  
*  
* CLEAR ALL ENTRIES  
*  
LDY				 #>EVQ.LEN  
LDA				 #0  
EVQI010			 STA EV.QUEUE-1,Y  
DEY				  
BNE				 EVQI010  
*  
* SET UP FREE LIST  
*  
LDX				 #>EVQ.CNT-2  
LDA				 #>EVQ.SIZ  
STA				 EVQ.FREE  
EVQI020			 TAY  
CLC				  
ADC				 #>EVQ.SIZ  
STA				 EVQ.LINK,Y  
DEX				   
BNE				 EVQI020  
RTS				   
SBTL			 "PSEUDO CLOCK INITIALIZATION"  
REP				 60  
*  
* THIS SUBROUTINE INITIALIZES THE PSEUDO CLOCK. IF THE  
* RAM BEHIND THE "D" 6522 HAS THE PROPER CHECKSUM, IT  
* IS USED TO INITIALIZE THE PSEUDO CLOCK. OTHERWISE,  
* THE PSEUDO CLOCK IS SET TO ZERO.  
*  
* (ADDED 23 OCT 81)  
* BOTH THE CLOCK AND PSEUDO CLOCK ARE  
* ARE NOW INITIALIZED  
*  
REP				 60  
*  
PCLK			 EQU $F0  
CKSUM			 EQU $F2  
CLKICR			 EQU $11 ; CLOCK INTERRUPT CONTROL REG  
CLKSTBY			 EQU $16 ; CLOCK STANDBY INTERRUPT  
CLOCK			 EQU $C070  
*  
CLK.INIT		 EQU *  
LDA				 #$D0  
STA				 PCLK ;POINT (PCLK) TO 8F:FFD0  
LDA				 #$FF  
STA				 PCLK+1  
LDA				 #$8F  
STA				 SXPAGE+PCLK+1  
LDA				 #$A5  
STA				 CKSUM ;INITIALIZE CHECKSUM  
*  
LDY				 #$00  
CLK010			 LDA (PCLK),Y ;COPY SAVED CLOCK DATA  
STA				 PCLOCK,Y ; TO PSEUDO CLOCK  
EOR				 CKSUM  
STA				 CKSUM ;UPDATE CHECKSUM  
INY				  
CPY				 #$0A  
BCC				 CLK010  
*  
CMP				 (PCLK),Y ;TEST CHECKSUM  
BEQ				 CLK030  
*  
LDA				 #$00  
CLK020			 DEY  
STA				 PCLOCK,Y ;ZERO PSEUDO CLOCK  
BNE				 CLK020  
CLK030			 LDA E.REG  
PHA				  
ORA				 #$80 ; SET 1 MHZ  
STA				 E.REG  
LDA				 #$00  
LDY				 Z.REG  
LDX				 #CLKICR  
STX				 Z.REG  
STA				 CLOCK ; DISABLE CLOCK INTERRUPTS  
LDX				 #CLKSTBY  
STX				 Z.REG  
STA				 CLOCK ; DISABLE STANDBY INTERRUPT  
STY				 Z.REG  
PLA				  
STA				 E.REG  
RTS				  
SBTL			 "CHARACTER FILE MANAGER INITIALIZATION"  
REP				 60  
*  
* CHAR FILE MANAGER INITIALIZATION ROUTINE  
*  
* CFMGR.INIT INITIALIZES ALL ENTRIES IN THE CFCB TABLE TO  
* THE "FREE" STATE.  
*  
REP				 60  
*  
CFMGR.INIT		 EQU *  
LDA				 #$80  
LDX				 #CFCB.MAX-1  
CFINIT010		 STA CFCB.DEV,X  
DEX				   
BPL				 CFINIT010  
RTS				   
SBTL			 "DEVICE MANAGER INITIALIZATION"  
REP				 60  
*  
* DEVICE MANAGER INITIALIZATION ROUTINE  
*  
* INITIALIZES THE SYSTEM DEVICE TABLE (SDT) BY WALKING THE  
* DEVICE INFORMATION BLOCK (DIB) LINKS. CALLED BY SYSLDR.  
*  
REP				 60  
*  
D.TPARMX		 EQU $C0  
REQCODE			 EQU D.TPARMX+$00  
DNUM			 EQU D.TPARMX+$01  
DNUM.TEMP		 DS 1  
*  
*  
DMGR.INIT		 EQU *  
LDX				 MAX.DNUM  
INC				 MAX.DNUM ; MAX.DNUM:=MAX DEV NUMBER IN SYSTEM+1  
STX				 DNUM.TEMP  
DMI110			 LDA #8 ; INITIALIZE ALL DEVICES IN SYSTEM (D.INIT)  
STA				 REQCODE  
LDA				 DNUM.TEMP  
STA				 DNUM  
JSR				 DMGR  
DEC				 DNUM.TEMP  
BNE				 DMI110  
RTS				 ; NORMAL EXIT  
SBTL			 "BUFFER MANAGER INITIALIZATION"  
REP				 60  
*  
* BMGR.INIT  
*  
* THIS ROUTINE INITIALIZES THE BUFFER TABLE'S ENTRIES TO "FREE".  
* CALLED DURING SYSTEM BOOT.  
*  
REP				 60  
*  
BMGR.INIT		 EQU *  
LDA				 #$FF ; USED WHEN FINDING LOWEST BUFFER IN TBL (BUFCOMPACT)  
STA				 XBYTE.T  
*  
LDX				 #BUF.CNT-1  
LDA				 #$80  
BUFI010			 STA PGCT.T,X ;SET ALL ENTRIES "FREE"  
DEX				  
BNE				 BUFI010  
*  
STX				 BUFREF ;ZERO COUNT BYTE IN BUFFER REFERENCE TABLE  
*  
CLC				  
RTS				  
SBTL			 "MEMORY MANAGER INITIALIZATION"  
REP				 60  
*  
* MMGR.INIT  
*  
* THIS ROUTINE INITIALIZES THE MEMORY MANAGER'S SEGMENT TABLE  
* TO FREE ENTRIES, AND DETERMINES THE MEMORY SIZE OF THE  
* MACHINE (96K,128K,160K,192K,224K,256K,..,512K IN 32K STEPS).  
*  
REP				 60  
*  
MMGR.INIT		 EQU *  
*  
* INIT SEGMENT TABLE  
*  
LDA				 #0  
STA				 ST.ENTRY  
LDA				 #$81  
STA				 ST.FREE  
*  
LDY				 #ST.CNT-1  
LDA				 #$80 ; SET LAST LINK TO NULL  
STA				 ST.FLINK,Y  
MEMI010			 TYA  
ORA				 #$80  
DEY				  
STA				 ST.FLINK,Y  
BNE				 MEMI010  
*  
* COMPUTE VIRTUAL LIMIT FROM MEMORY SIZE  
* VRT.LIM := NUMBER OF PAGES IN BANK SWITCHED MEMORY - 1  
* := (MEMSIZ-2)*64 - 1  
* := (MEMSIZ-4)*64 + 127  
*  
				SEC    
				LDA MEMSIZE   
				SBC #4   
				BCC MEMI.ERR   
				LSR A   
				LSR A   
				STA VRT.LIM+1   
				LDA #$FE   
				ROR A   
				STA VRT.LIM   
				CLC    
				RTS  ; NORMAL EXIT  
*     
MEMI.ERR		 LDA #MEM2SML ; FATAL ERR - MEM < 64K  
				JSR SYSDEATH   
				PAGE    
				REP 60   
*  
* BLOCK FILE MANAGER INITIALIZATION  
*  
				REP 60   
*     
SISTER			 EQU $1400 ;BFM XPAGE  
BFM.INIT		 EQU *   
				LDA #BFMFCB1 ; ADDRESS OF PAGE 1 OF FCB  
				STA >FCBZPP+1   
				LDA #BFMFCB2 ; AND PAGE 2  
				STA >FCBZPP+3   
				LDA #0   
				STA >FCBZPP ; FCB PAGE ALIGNED  
				STA >FCBZPP+2   
				STA SISTER+FCBZPP+1 ; PREPARE PART OF EXTEND BYTE  
				STA SISTER+FCBZPP+3   
				TAY  ; MAKE ZERO INTO INDEX  
CLRBUFFS		 EQU *   
				STA PATHBUF,Y ; PATHNAME BUFFER PAGE  
				STA VCB,Y ; VOLUME CONTROL BLOCK PAGE  
				STA (>FCBZPP),Y ; BOTH FILE CONTROL BLOCK PAGES  
				STA (>FCBZPP+2),Y   
				INY    
				BNE CLRBUFFS   
				LDX #$3F ; SIZE OF MY ZERO PAGE STUFF  
CLRZWRK			 STA 0,X ; ZERO PAGE ZEROED  
				STA WORKSPC,X   
				DEX    
				BPL CLRZWRK   
				LDA #<PATHBUF   
				STA PFIXPTR+1   
				LDA #BFMFCB1   
				STA FCBADDRH   
				LDA #BMAPAGE ; BIT MAP A PAGE NUMBER  
				STA BMAMADR   
				LDA #BMBPAGE ; BIT MAP B PAGE NUMBER  
				STA BMBMADR   
				CLC    
				RTS    
*     
				LST ON   
ZZEND			 EQU *   
ZZLEN			 EQU ZZEND-ZZORG   
				IFNE ZZLEN-LENINIT   
				FAIL 2,"SOSORG FILE IS INCORRECT FOR INIT"  
				FIN    
				    
*************************************************************************  
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: INIT.SRC  
*************************************************************************  
				 
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13\sos.s.init.txt
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
