NEW
  AUTO 3,1
*--------------------------------------
* THIS MODULE IS RESPONSIBLE FOR CALLING THE CORRECT DEVICE  
* DRIVER WHEN A D.READ...D.INIT SYSTEM CALL IS MADE.  
* (NOTE: D.OPEN,D.CLOSE AND D.INIT ARE ONLY CALLABLE FROM  
* INSIDE THE OPERATING SYSTEM). D.INFO AND GET.DNUM CALLS  
* ARE HANDLED INSIDE THIS MODULE. REPEAT.IO BYPASSES THIS MODULE.  
*  
* SYSTEM DEVICE TABLE (SDT)  
*  
* CONTAINS THE ADDRESS OF EACH DRIVER'S DIB (SDT.DIB), THE  
* ADDRESS OF EACH DRIVER'S ENTRY POINT (SDT.ADR), AND THE  
* UNIT # OF EACH DRIVER (SDT.UNIT). THE TABLE IS INDEXED  
* BY DEVICE NUMBER. ENTRY 0 IS RESERVED FOR FUTURE USE.  
*  
SDT.SIZE		 EQU 25  
*  
MAX.DNUM			DS 1 ;MAX DEV NUMBER IN SYSTEM+1  
SDT.DIBL		 	DS SDT.SIZE ;ADR OF DEVICE INFORMATION BLOCK  
SDT.DIBH		 	DS SDT.SIZE  
*  
SDT.ADRL			DS SDT.SIZE ;ADR OF ENTRY POINT  
SDT.ADRH			DS SDT.SIZE  
*  
SDT.BANK			DS SDT.SIZE ;BANK # OF DEVICE  
*  
SDT.UNIT			DS SDT.SIZE ;UNIT # OF DRIVER  
*  
* BLOCK DEVICE LIST TABLE
*
BLKD.SIZE		 EQU 13  
BLKDLST			 DFB $00  
				DS BLKD.SIZE-1  
*   
* DATA DECLARATIONS   
*   
D.TPARMX		 EQU $C0  
REQCODE			 EQU D.TPARMX  
*   
* D.READ/WRITE/CTRL/STATUS/OPEN/CLOSE/INIT/REPEAT PARMS  
*  
DNUM			 EQU D.TPARMX+1  
*  
* D.INFO PARMS  
*  
I.DNUM			 EQU D.TPARMX+1  
I.DNAME			 EQU D.TPARMX+2  
I.DLIST			 EQU D.TPARMX+4  
I.LENGTH		 EQU D.TPARMX+6  
*  
* GET.DEV.NUM PARMS  
*  
G.DNAME			 EQU D.TPARMX+1  
G.DNUM			 EQU D.TPARMX+3  
*  
* SDT ENTRY (=DIB) FIELDS  
*  
DIB.SLOT		 EQU $11 ;DIB'S DEVICE SLOT FIELD  
DIB.DTYPE		 EQU $13 ;DIB'S DEVICE TYPE FIELD  
*     
SDTP			 EQU D.TPARMX+$10 ; PTR TO CURRENT SDT ENTRY  
*  
* DEVICE MANAGER (MAIN ENTRY POINT)  
*  
DMGR			 EQU *   
*     
				LDA REQCODE   
				CMP #4   
				BCC DRIVER ; D.READ/WRITE/CTRL/STATUS CALL  
				BNE DM000   
				JMP GET.DNUM ; GET.DEV.NUM CALL  
DM000			 CMP #5   
				BEQ D.INFO ; D.INFO CALL  
				CMP #$A   
				BCC DRIVER ; D.OPEN/CLOSE/INIT  
				LDA #BADSYSCALL ; ELSE FATAL ERROR  
				JSR SYSDEATH ; EXIT  
				PAGE    
				REP 100   
* D.READ/WRITE/CTRL/STATUS/OPEN/CLOSE/INIT CALLS   
* "JSR" TO DEVICE DRIVER   

DRIVER			EQU *   
*   
				LDX				 DNUM ; GET DNUM SYSCALL PARM  
				BEQ				 DM005 ; WITHIN BOUNDS?  
				CPX				 MAX.DNUM ; "  
				BCC				 DM010   
*   
* DNUM TOO LARGE   
*   
DM005			LDA #>BADDNUM ; INVALID DEVICE NUMBER  
JSR				 SYSERR ; ERROR EXIT  
*   
* MAP DEV# TO UNIT#   
*   
DM010			 LDA SDT.UNIT,X   
STA				 DNUM   
*   
* "JSR" TO DEVICE DRIVER VIA JMP TABLE   
*   
				LDA	B.REG ; STACK B.REG  
				PHA   
				LDA #<DM.RTN-1 ; STACK RETURN ADDRESS  
				PHA    
				LDA #>DM.RTN-1   
				PHA    
*     
				LDA SDT.BANK,X ; SELECT RAM BANK  
				STA B.REG   
				LDA SDT.ADRH,X ; STACK DRIVER ENTRY POINT ADDRESS  
				PHA    
				LDA SDT.ADRL,X   
				PHA    
*     
				LDA E.REG ; SWITCH IN I/O BANK  
				ORA #$40   
				STA E.REG   
				RTS  ; AND, "JSR" TO DEVICE DRIVER  
*     
DM.RTN			 LDA E.REG ; SWITCH OUT I/O BANK  
				AND #$BF   
				STA E.REG   
				PLA  ; RESTORE B.REG  
				STA B.REG   
				SEC    
				LDA SERR ; RETRIEVE ERROR CODE  
				BNE DM017 ; ENSURE CARRY CLEARED IF NO ERROR  
				CLC    
DM017			 RTS  ; AND, EXIT TO CALLER  
				PAGE    
				REP 100   
* D.INFO(IN.DNUM, OUT.DNAME, OUT.DEVLIST, IN.LENGTH) SYSTEM CALL  
REP				 100   
D.INFO			 EQU *   
*   
LDX				 I.DNUM ; GET DNUM PARM  
BEQ				 DM020 ; WITHIN BOUNDS?  
CPX				 MAX.DNUM ; "  
BCC				 DM030   
DM020			 LDA #>BADDNUM ; NO, DNUM TOO LARGE  
JSR				 SYSERR ; ERROR EXIT  
*  
* MOVE PARMS FM SDT ENTRY (DEV INFO BLOCK) TO CALLER'S  
* PARM LIST  
*  
DM030			 JSR SETUP.SDT ; SET UP ZPAGE PTR TO SDT ENTRY  
*  
* OUPUT DNAME PARM  
*  
LDA				 (SDTP),Y ; LOAD PARM'S BYTE COUNT  
TAY				  
DM040			 LDA (SDTP),Y  
STA				 (I.DNAME),Y  
DEY				  
BPL				 DM040  
*  
* OUTPUT DEVINFO PARM (SLOT,UNIT,DEVID,PRODCODE)  
*  
LDA				 #DIB.SLOT  
CLC				 ; ADVANCE SDTP TO 2ND PARM IN SDT  
ADC				 SDTP  
STA				 SDTP  
BCC				 DM045  
INC				 SDTP+1  
DM045			 LDY I.LENGTH ; LOAD BYTE COUNT  
BEQ				 DM.EXIT ; IF 0 THEN DONE  
DEY				  
CPY				 #$B  
BCC				 DM050  
LDY				 #$A  
DM050			 LDA (SDTP),Y  
STA				 (I.DLIST),Y  
DEY				  
BPL				 DM050  
*  
DM.EXIT			 CLC  
RTS				 ; NORMAL EXIT  
PAGE			  
REP				 100  
* GET.DEV.NUM(IN.DNAME; OUT.DNUM) SYSTEM CALL  
REP				 100  
*  
GET.DNUM		 EQU *   
*     
				LDX #1 ; SETUP PTR TO 1ST SDT ENTRY  
*     
DM070			 JSR SETUP.SDT ; SET UP ZPAGE PTR TO SDT ENTRY  
*     
				LDA (SDTP),Y ; COMPARE DNAME LENGTHS  
				CMP (G.DNAME),Y   
				BNE NXTSDT   
*     
				TAY  ; LENGTHS MATCH, NOW COMPARE CHARS  
DM080			 LDA (G.DNAME),Y   
				CMP #$60   
				BCC DM090   
				AND #$DF ; UPSHIFT  
DM090			 CMP (SDTP),Y   
				BNE NXTSDT   
				DEY    
				BNE DM080   
*     
				TXA  ; CHARS MATCH  
				LDY #0   
				STA (G.DNUM),Y ; OUTPUT DEV NUM PARM  
				LDY #DIB.DTYPE ; SET "N" FLAG IN STATUS REG.  
				LDA (SDTP),Y ; N=1(BLOCK DEVICE) N=0(CHAR DEVICE)  
				CLC    
				RTS  ; NORMAL EXIT  
*     
NXTSDT			 INX  ; LAST SDT ENTRY?  
				CPX MAX.DNUM   
				BCC DM070   
*     
				LDA #>NODNAME ; ERROR, DNAME NOT FOUND IN SDT  
				JSR SYSERR ; RETURN TO CALLER  
				PAGE    
				REP 100   
* SETUP.SDT(IN.X=DNUM, OUT.SDTP, B.REG, Y=0) X="UNCHANGED"  
REP				 100   
SETUP.SDT		 EQU *   
LDA				 SDT.DIBL,X ; SET UP ZPAGE PTR TO SDT ENTRY  
STA				 SDTP ; (POINTS TO DNAME FIELD)  
LDA				 SDT.DIBH,X   
STA				 SDTP+1   
LDA				 SDT.BANK,X   
STA				 B.REG   
LDY				 #0   
STY				 SXPAGE+SDTP+1   
RTS				    
*    
LST				 ON   
ZZEND			 EQU *   
ZZLEN			 EQU ZZEND-ZZORG   
IFNE			 ZZLEN-LENDMGR   
FAIL			 2,"SOSORG FILE IS INCORRECT FOR DEVMGR"  
FIN				    
				   
*************************************************************************  
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: DEVMGR.SRC  
*************************************************************************  
				 
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13/sos.s.devmgr
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
