NEW
  AUTO 3,1
*--------------------------------------
*
* THIS MODULE IS RESPONSIBLE FOR FIELDING ALL INTERRUPTS
* AND RELAUNCHING THE INTERRUPTED CODE AFTER THE INTERRUPTS
* HAVE BEEN PROCESSED. THE MAJOR FUNCTIONAL AREAS ARE:
*
* GENERAL INTERRUPT RECEIVER
* NMI INTERRUPT RECEIVER
* DISPATCHER
* INTERRUPT ALLOCATION & DEALLOCATION
* EVENT QUEUE MANAGER
* TABLE INITIALIZATION
*
* CONSTANT DECLARATIONS
*
BITON0			.EQ $01
BITON1			.EQ $02
BITON2			.EQ $04
BITON4			.EQ $10
BITON5			.EQ $20
BITON6			.EQ $40
BITON7			.EQ $80
BITOFF3			.EQ $F7
BITOFF4			.EQ $EF
BITOFF5			.EQ $DF
BITOFF6			.EQ $BF
BITOFF7			.EQ $7F
*BACKBIT			.EQ $20 				; BACKUP BIT MASK
*
* 6522 REGISTERS
*
*D.IFR			.EQ $FFDD
*D.IER			.EQ $FFDE
*E.IORB			.EQ $FFE0
*E.IFR			.EQ $FFED
*E.IER			.EQ $FFEE
*E.IORA			.EQ $FFEF
*
* REGISTER PRESERVATION EQUATES
* FOR USE DURING INTERRUPT PROCESSING
*
A.SAVE			.EQ $103
S.SAVE			.EQ $104
*SP.SAVE			.EQ $1FF
*E.SAVE			.EQ $1FE
*Z.SAVE			.EQ $1FD
*B.SAVE			.EQ $1FC
EXPNSLOT		.HS 00 					;CURRENT I/O EXPANSION SLOT
*
* STATUS LOCATIONS FOR INTERRUPT POLLING
*
*ACIASTAT		.EQ $C0F1
ANYSLOT			.DA #BITON1
SLOT1			.EQ $C065
SLOT2			.EQ $C064
SLOT3			.DA #BITON5
SLOT4			.DA #BITON4
*
* INTERRUPT ZERO PAGE STORAGE & EQUATES
*
SIRARGS			.EQ $F9 ;AND $FA
QEVARGS			.EQ $FB ;AND $FC
IRQADDR			.EQ $FD ;AND $FE
ZPGSP			.EQ $FF
ZPGSTART		.EQ $F8
ZPGSTOP			.EQ $28
ZPGSPACE		.EQ $20
ZPGSTACK		.DA #ZPGSTART
*
* SYSTEM INTERNAL RESOURCE
* TABLE STORAGE AND EQUATES
*
SIRTBLSIZ		.EQ $18
SIRTABLE		.BS SIRTBLSIZ
SIRADR.L		.BS SIRTBLSIZ
NMIADR.L		.BS 1 ;MUST PRECEED SIRADR.H
SIRADR.H		.BS SIRTBLSIZ
SIRADR.B		.BS SIRTBLSIZ
*
* EVENT QUEUE STORAGE AND EQUATES
*
EVQ.SIZ			.EQ 6 ;ENTRY SIZE
EVQ.CNT			.EQ $07 ;ENTRY COUNT
EVQ.LEN			.EQ $2A ;(EVQ.SIZ*EVQ.CNT)
EV.QUEUE		.BS EVQ.LEN
EVQ.FREE		.EQ EV.QUEUE+2 			;FIRST FREE ENTRY INDEX
EVQ.LINK		.EQ EV.QUEUE+0			;NEXT ACTIVE ENTRY INDEX
EVQ.PRI			.EQ EV.QUEUE+1 			;EVENT PRIORITY
EVQ.ID			.EQ EV.QUEUE+2 			;EVENT IDENTIFICATION
EVQ.ADRL		.EQ EV.QUEUE+3 			;EVENT ADDRESS: LOW BYTE
EVQ.ADRH		.EQ EV.QUEUE+4 			;EVENT ADDRESS: HIGH BYTE
EVQ.BANK		.EQ EV.QUEUE+5 			;EVENT ADDRESS: BANK
*
* THIS IS THE GENERAL INTERRUPT RECEIVER. WHEN AN
* INTERRUPT OCCURS, THE CPU PASSES CONTROL TO THE GIR
* THROUGH THE IRQ VECTOR. THE GIR IS RESPONSIBLE FOR
* SAVING THE CURRENT ENVIRONMENT, SETTING UP THE SOS
* ENVIRONMENT, AND CALLING THE APPROPRIATE CODE MODULE.
* IF THE INTERRUPT WAS CAUSED BY A BRK, THE GIR CALLS
* THE SYSTEM CALL MANAGER. OTHERWISE, THE GIR POLLS THE
* I/O DEVICES AND CALLS THE APPROPRIATE MASTER INTERRUPT
* HANDLER. WHEN THE SCM OR MIH RETURNS, THE GIR PASSES
* CONTROL TO THE DISPATCHER.
*
*
IRQ.RCVR		.EQ *
*
* SAVE CPU REGISTERS A, X, & Y ON CURRENT STACK
*
				pha
				txa
				pha
				tya
				pha
*
* CHECK FOR STACK OVERFLOW AND
* SAVE INTERRUPTED STATUS IN Y REGISTER.
*
				tsx
				cpx #$FA
				bcc GIR005
				lda #STKOVFL
				jsr SYSDEATH
GIR005			ldy S.SAVE,X
*
* SET UP INTERRUPT ENVIRONMENT:
* BINARY ARITHMETIC, 2 MHZ, I/O ENABLED,
* RAM WRITE ENABLED, PRIMARY STACK,
* AND $F000 RAM SELECTED. PRESERVE
* USER STATE OF SCREEN AND RESET LOCK.
*
				cld
				lda	E.REG
				tax
				and	#BITON5+BITON4
				ora	#BITON6+BITON2
				sta	E.REG
*
* IF NOT ALREADY ON PRIMARY STACK, SAVE USER'S STACK
* POINTER AND SET UP SOS STACK POINTER.
*
				txa
				and	#BITON2
				bne	GIR010
				txa
				tsx
				stx	SP.SAVE
				ldx	#E.SAVE
				txs
				tax
*
* SAVE E, Z, B, & I/O EXPANSION SLOT ON SOS STACK
* IF BRK THEN CALL SCMGR ELSE POLL I/O DEVICES
*
GIR010			txa
				pha
				lda	Z.REG
				pha
				lda	B.REG
				pha
				lda	EXPNSLOT
				pha
				bit	$CFFF
				bit	$C020 ;RESET I/O SPACE
				lda	#$00
				sta	EXPNSLOT
				tya
				and	#BITON4
				beq	POLL.IO
*
* CALL SYSTEM CALL MANAGER; ON RETURN, PUT ERROR CODE IN
* USER'S A REGISTER AND SET RETURN STATUS, THEN DISPATCH.
*
				tsx				 		; CHECK FOR
				cpx	#B.SAVE-2 			; REENTRANT
				beq	GIR020 				; SYSTEM CALL
				lda	#BADBRK
				jsr	SYSDEATH

GIR020			lda E.REG 				; SELECT $C000 RAM
				and	#BITOFF6
				sta	E.REG
				cli						; ENABLE INTERRUPTS
				jsr	SCMGR 				; CALL THE SYSTEM CALL MGR
				lda	#BACKBIT 			; GET THE MASK
				sta	BACKMASK 			; SET IT IN SYSGLOB
				jsr	CHKBUF
				sei
				ldx	SP.SAVE
				lda	Z.SAVE
				eor	#BITON0 			; SET ZERO PAGE TO
				sta	Z.REG 				; CALLER'S STACK
				lda	SERR
				sta	>A.SAVE,X
				php
				lda	>S.SAVE,X
				and	#$7D
				sta	>S.SAVE,X
				pla
				and	#$82
				ora	>S.SAVE,X
				sta	>S.SAVE,X
				jmp	DISPATCH
*
* SET INTERRUPT ZERO PAGE AND SOS BANK
* THEN POLL I/O DEVICES
*
POLL.IO			bit E.IORA 				; VERIFY THAT 'IRQ IS LOW
				bpl	PIO006
				inc	IRQCNTR 			; BUMP FALSE IRQ COUNTER
				bne	PIO004
				inc	IRQCNTR+1
PIO004			jmp DISPATCH
PIO006			lda #0 					; SET INTERRUPT ZERO PAGE
				sta	Z.REG
				lda	E.REG
				ora	#BITON7 			; FORCE 1 MHZ FOR
				sta	E.REG 				; READING ACIA STATUS
				and	#BITOFF7
				ldx	#$01
				ldy	ACIASTAT 			; ANY INTERRUPT ON ACIA?
				sta	E.REG
				bmi	PIO070
				lda	E.IFR 				; ANY INTERRUPT ON E-6522?
				bpl	PIO020 				; NO
				and	E.IER
				ldy	#7
				ldx	#$02

PIO010			lsr 					; CHECK FLAG BITS
				bcs	PIO070
				inx
				dey
				bne PIO010
				beq PIO035

PIO020			lda D.IFR 				; ANY INTERRUPT ON D-6522?
				bpl PIO035
				and D.IER
				bit ANYSLOT 			; ANY SLOT INTERRUPT?
				bne PIO040 				; YES
				ldy #7
				ldx #$09
PIO030			lsr 					; CHECK FLAG BITS
				bcs PIO070
				inx
				dey
				bne PIO030
PIO035			ldx #$10 				; INTERRUPT NOT FOUND
				bne PIO050
PIO040			ldx #$11
				bit SLOT1 				; SLOT 1?
				bpl PIO070
				inx
				bit SLOT2 				; SLOT 2?
				bpl PIO070
				lda E.IORA
				inx
				bit SLOT3 				; SLOT 3?
				beq PIO070
				inx
				bit SLOT4 				; SLOT 4?
				beq PIO070
				ldx #$0A
*
* BAD INTERRUPT -- SYSTEM DEATH
*
PIO050			lda #BADINT1 			; INTERRUPT NOT FOUND
				jsr SYSDEATH
PIO060			lda #BADINT2 			; BAD ZERO PAGE ALLOCATION
				jsr SYSDEATH
*
* INTERRUPTING DEVICE FOUND
* ALLOCATE ZERO PAGE AND CALL MASTER INTERRUPT HANDLER
*
* NOTE:
* SINCE READING THE ACIA'S STATUS REGISTER RESETS THE
* DSR AND DCD BITS, THE STATUS READ BY THE POLLING
* ROUTINE MUST BE PASSED TO THE INTERRUPT HANDLER;
* THE Y REGISTER HAS BEEN SELECTED FOR THIS PURPOSE.
* THE CURRENT IMPLEMENTATION DOES NOT USE Y IN CALLING
* THE INTERRUPT HANDLER. IF SUBSEQUENT REVISIONS
* NEED TO USE Y, THE STATUS MUST BE PRESERVED AND
* RESTORED BEFORE CALLING THE INTERRUPT HANDLER.
*
CALLMIH			jmp (IRQADDR)
*
PIO070			lda SIRTABLE,X 			; INTERRUPT ALLOCATED?
				bpl	PIO050 				; NO
				lda	SIRADR.L,X 			; GET INTERRUPT ADDRESS
				sta	IRQADDR
				ora	SIRADR.H,X 			; CHECK FOR ADDRESS = $00
				beq	PIO050 				; BAD ADDRESS
				lda	SIRADR.H,X
				sta	IRQADDR+1
				lda	SIRADR.B,X
				sta	B.REG
				lda	ZPGSTACK 			; ALLOCATE MIH ZERO PAGE
				cmp	#ZPGSTOP+ZPGSPACE
				bcc	PIO060 				; TOO MANY NESTED INTERRUPTS
				sbc	#ZPGSPACE
				sta	ZPGSTACK
				sta	ZPGSP
				tax
				jsr	CALLMIH 			; CALL INTERRUPT HANDLER
				sei
				lda	#$00
				sta	Z.REG
				clc
				lda	ZPGSTACK 			; DEALLOCATE MIH ZERO PAGE
				adc	#ZPGSPACE
				sta	ZPGSTACK
				sta	ZPGSP
				lda	#BITON1
				sta	D.IFR 				 ;CLEAR ANY SLOT INTERRUPT
				jmp	DISPATCH
*
* THIS IS THE NON-MASKABLE INTERRUPT RECEIVER. WHEN AN
* NMI OCCURS, THE CPU PASSES CONTROL TO THE NMI RECEIVER
* THROUGH THE NMI VECTOR. THE OPERATION OF THE NMI
* RECEIVER IS ESSENTIALLY THE SAME AS THE GIR EXCEPT
* THAT IT IS NOT CONCERNED WITH BRK, AND THE ONLY VALID
* SOURCE OF AN NMI IS THE KEYBOARD OR THE I/O DEVICE THAT
* HAS ALLOCATED THE NMI RESOURCE.
*
NMI.RCVR		.EQ *
*
* SAVE CPU REGISTERS A, X, & Y ON CURRENT STACK
*
				pha
				txa
				pha
				tya
				pha
*
* CHECK FOR STACK OVERFLOW
*
				tsx
				cpx #$FA
				bcc NMI005
				lda #STKOVFL
				jsr SYSDEATH
*
* SET UP INTERRUPT ENVIRONMENT:
* BINARY ARITHMETIC, 2 MHZ, I/O ENABLED,
* RAM WRITE ENABLED, PRIMARY STACK,
* AND $F000 RAM SELECTED. PRESERVE
* USER STATE OF SCREEN AND RESET LOCK.
*
NMI005			cld
				lda E.REG
				tax
				and #BITON5+BITON4
				ora #BITON6+BITON2
				sta E.REG
*
* IF NOT ALREADY ON PRIMARY STACK, SAVE USER'S
* STACK POINTER AND SET UP SOS STACK POINTER.
*
				txa
				and	#BITON2
				bne	NMI010
				txa
				tsx
				stx	SP.SAVE
				ldx	#E.SAVE
				txs
				tax
*
* SAVE SYSTEM CONTROL REGISTERS E, Z, & B ON SOS STACK
*
NMI010			txa
				pha
				lda Z.REG
				pha
				lda B.REG
				pha
				lda EXPNSLOT
				pha
				bit $CFFF
				bit $C020 ;RESET I/O SPACE
				lda #$00
				sta EXPNSLOT
*
* SET INTERRUPT ZERO PAGE *
				lda	#0
				sta	Z.REG
*
* SEE IF NMI IS FROM KEYBOARD OR I/O DEVICE
*
				lda E.IORB
				bmi NMI030
*
* NMI IS FROM I/O DEVICE
*
				lda	SIRTABLE ;NMI ALLOCATED?
				bpl	NMI020
				jsr	CALLNMI
				sei
				jmp	DISPATCH

CALLNMI			lda SIRADR.L
				sta	NMIADR.L
				lda	SIRADR.B
				sta	B.REG
				jmp	(NMIADR.L)
*
* BAD INTERRUPT -- SYSTEM DEATH
*
NMI020			lda #BADINT1 ;NMI NOT ALLOCATED
				jsr	SYSDEATH
*
* NMI IS FROM THE KEYBOARD
*
NMI030			lda SYSBANK
				sta	B.REG
				jsr	KYBDNMI
				sei
				jmp	DISPATCH
*
* THIS IS THE DISPATCHER. UPON COMPLETION, ALL SOS CALLS
* AND INTERRUPT HANDLERS RETURN CONTROL TO THE DISPATCHER.
* ITS PURPOSE IS TO SET UP THE APPROPRIATE ENVIRONMENT AND
* PASS CONTROL TO WHATEVER CODE SHOULD RUN NEXT.
*
* WHEN SOS IS INTERRUPTED, CONTROL ALWAYS RETURNS TO THE
* INTERRUPTED CODE. HOWEVER, WHEN THE USER IS INTERRUPTED,
* BY EITHER A SOS CALL OR AN INTERRUPT, THE DISPATCHER
* MUST CHECK THE EVENT QUEUE. IF THERE IS AN ACTIVE EVENT
* WITH A PRIORITY HIGHER THAN THE CURRENT EVENT FENCE,
* CONTROL IS PASSED TO THE EVENT CODE. OTHERWISE, CONTROL
* RETURNS TO THE INTERRUPTED CODE.
*
DISPATCH		.EQ *
*
* DISABLE INTERRUPTS AND RESTORE
* SYSTEM CONTROL REGISTERS B & Z
*
				sei
				lda	E.REG
				ora	#BITON6 ;ENABLE I/O
				sta	E.REG
				pla
				jsr	SELC800 ;RESTORE I/O SPACE
				pla
				sta	B.REG
				pla
				sta	Z.REG
*
* CHECK SAVED ENVIRONMENT REGISTER
* IF RETURNING TO PRIMARY STACK
* THEN RESTORE E REG AND RELAUNCH SOS
* ELSE RESET STACK POINTER & RESTORE E REG
*
				pla
				ora	#BITON5 ;SET SCREEN STATE TO
				bit	SCRNMODE ; CURRENT SCREEN MODE
				bmi	DSP005
				and	#BITOFF5
DSP005			tay
				and	#BITON2
				beq	DSP010
				sty	E.REG
				bne	DSP030
DSP010			pla
				tax
				txs
				sty	E.REG
*
* CHECK FOR ACTIVE EVENT WITH PRIORITY > FENCE
*
DSP020			lda CEVPRI
				ldx EVQ.LINK
				cmp EVQ.PRI,X
				bcs DSP030
*
* PROCESS ACTIVE EVENT TRAP
* SAVE E, Z, B, & CALLER'S PRIORITY ON STACK THEN CALL
* EVENT. UPON RETURN, RESTORE PRIORITY, B, Z, & E THEN
* CHECK FOR MORE EVENTS.
*
				lda	E.REG
				pha
				lda	Z.REG
				pha
				lda	B.REG
				pha
				lda	CEVPRI
				pha
				jsr	DO.EVENT
				sei
				pla
				sta	CEVPRI
				pla
				sta	B.REG
				pla
				sta	Z.REG
				pla
				ora	#BITON5 			; SET SCREEN STATE TO
				bit	SCRNMODE 			; CURRENT SCREEN MODE
				bmi	DSP025
				and	#BITOFF5
DSP025			sta E.REG
				jmp DSP020
*
* RESTORE CPU REGISTERS Y, X, & A AND LAUNCH
*
DSP030			pla
				tay
				pla
				tax
				pla
				rti
*
* THIS SUBROUTINE CALLS THE HIGHEST PRIORITY ACTIVE EVENT.
* FIRST, IT DELINKS THE FIRST ENTRY ON THE ACTIVE LIST AND
* LINKS IT TO THE FREE LIST. THEN, IT SETS UP THE BANK,
* ADDRESS, ID, & STATUS AND CALLS THE EVENT VIA AN RTI.
*
DO.EVENT		.EQ *
*
* WRITE ENABLE RAM
*
				ldy	E.REG
				tya
				and	#BITOFF3
				sta	E.REG
*
* DELINK ENTRY FROM ACTIVE LIST AND RELINK IT TO FREE LIST
*
				ldx	EVQ.LINK
				lda	EVQ.LINK,X
				sta	EVQ.LINK
				lda	EVQ.FREE
				sta	EVQ.LINK,X
				stx	EVQ.FREE
*
* SET FENCE TO EVENT PRIORITY THEN RESTORE E REG
*
				lda	EVQ.PRI,X
				sta	CEVPRI
				sty	E.REG
*
* SET UP B, Z, E, ADDRESS, ID, & STATUS
*
				lda	EVQ.BANK,X
				sta	B.REG
				lda	EVQ.ADRH,X
				pha
				lda	EVQ.ADRL,X
				pha
				ldy	EVQ.ID,X
				php
				pla
				and	#$82
				pha
				tya
				rti

* SYSTEM INTERNAL RESOURCE NUMBERS
*
*
* SIR RESOURCE
*
* 0 SOUND PORT / I/O NMI
* 1 ACIA
* 2 E.CA2 -- KEYBOARD
* 3 E.CA1 -- CLOCK
* 4 E.SR
* 5 E.CB2 -- VBL +
* 6 E.CB1 -- VBL -
* 7 E.T2
* 8 E.T1
* 9 D.CA2 -- CSP INPUT FLAG / INPUT SWITCH 1
* A D.CA1 -- ANY SLOT (RESERVED FOR SOS)
* B D.SR -- CSP DATA REGISTER
* C D.CB2 -- CSP DATA I/O / ENSIO
* D D.CB1 -- CSP CLOCK / ENSEL / A/D SELECT / INPUT SW3
* E D.T2
* F D.T1
* 10 DISK STEPPER / GRAPHICS SCROLL / CHARACTER DOWNLOAD
* 11 SLOT 1
* 12 SLOT 2
* 13 SLOT 3
* 14 SLOT 4
* 15 (UNASSIGNED)
* 16 (UNASSIGNED)
* 17 (UNASSIGNED)
*
* RESOURCE ALLOCATION AND DEALLOCATION
*
* SIRS ARE ALLOCATED AND DEALLOCATED BY THE SUBROUTINES
* 'ALLOCSIR' AND 'DEALCSIR'. THE RESOURCE PARAMETERS ARE
* PASSED IN A TABLE THAT CONTAINS ONE FIVE-BYTE ENTRY FOR
* EACH SIR THAT IS TO BE ALLOCATED OR DEALLOCATED. THE
* TABLE ENTRY FORMAT IS SHOWN BELOW:
*
* 0 1 2 3 4
* +-------+-------+-------+-------+-------+
* | SIR # | ID | ADR.L | ADR.H | ADR.B |
* +-------+-------+-------+-------+-------+
*
* SIR # -- SYSTEM INTERNAL RESOURCE NUMBER
* ID -- IDENTIFICATION BYTE
* SUPPLIED BY ALLOCSIR, CHECKED BY DEALCSIR
* ADR -- INTERRUPT ADDRESS (LOW, HIGH, BANK)
* ZERO IF NO INTERRUPT HANDLER
*
*
* ALLOCSIR -- ALLOCATE SYSTEM INTERNAL RESOURCES
*
* PARAMETERS:
* A: NUMBER OF BYTES IN TABLE
* X: TABLE ADDRESS (LOW BYTE)
* Y: TABLE ADDRESS (HIGH BYTE)
*
* NORMAL EXIT -- SIRS ALLOCATED
* CARRY: CLEAR
* A, X, Y: UNDEFINED
*
* ERROR EXIT -- SIRS NOT ALLOCATED
*CARRY: SET
*X: SIR NUMBER
* A, Y: UNDEFINED
*
*
* DEALCSIR -- DEALLOCATE SYSTEM INTERNAL RESOURCES
*
* PARAMETERS:
* A: NUMBER OF BYTES IN TABLE
* X: TABLE ADDRESS (LOW BYTE)
* Y: TABLE ADDRESS (HIGH BYTE)
*
* NORMAL EXIT -- SIRS DEALLOCATED
* CARRY: CLEAR
* A, X, Y: UNDEFINED
*
* ERROR EXIT -- SIRS NOT DEALLOCATED
* CARRY: SET
* X: SIR NUMBER
* A, Y: UNDEFINED
*
IDBYTE			.DA #$81
*
ALLOCSIR		clc
				php
				sei
				sta SIRARGSIZ 			; SAVE TABLE SIZE
				lda E.REG
				sta SIRTEMP
				ora #BITON2 			; FORCE PRIMARY STACK
				and #BITOFF3 			; AND WRITE ENABLE
				sta E.REG
				lda SIRTEMP
				pha
				lda Z.REG
				pha
				lda #$00
				sta Z.REG 				; SET ZERO PAGE := $00
				stx SIRARGS
				sty SIRARGS+1 			; SET POINTER TO TABLE
*
				ldy #$00

ASIR010			lda (SIRARGS),Y 		; GET SIR NUMBER
				cmp #SIRTBLSIZ
				tax
				bcs ASIR020
				lda SIRTABLE,X 			; CHECK ALLOCATION
				bmi ASIR020
				lda IDBYTE
				sta SIRTABLE,X 			; ALLOCATE SIR
				iny
				sta (SIRARGS),Y 		; RETURN ID BYTE
				iny
				lda (SIRARGS),Y
				sta SIRADR.L,X 			; SAVE INTERRUPT ADDRESS
				iny
				lda (SIRARGS),Y
				sta SIRADR.H,X
				iny
				lda (SIRARGS),Y
				sta SIRADR.B,X
				iny
				cpy SIRARGSIZ
				bcc ASIR010
*
				clc
				inc IDBYTE 				; BUMP ID BYTE
				bmi SIREXIT
				lda #$81
				sta IDBYTE
				bmi SIREXIT
*
ASIR020			stx SIRTEMP 			; SAVE BAD SIR NUMBER
ASIR030			sec
				tya
				sbc #5
				tay
				bcc ASIR040
				lda (SIRARGS),Y 		; GET SIR NUMBER
				tax
				lda #FALSE
				sta SIRTABLE,X 			; RELEASE ALLOCATED SIRS
				beq ASIR030
*
ASIR040			ldx SIRTEMP 			; RETURN BAD SIR
				sec

SIREXIT			pla
				sta Z.REG 				; RESTORE Z REGISTER
				pla
				sta E.REG 				; RESTORE E REGISTER
				bcc SIREXIT1
				pla
				ora #BITON0
				pha
SIREXIT1		plp
				rts
*
*
*
DEALCSIR		clc
				php
				sei
				sta SIRARGSIZ 			; SAVE TABLE SIZE
				lda E.REG
				sta SIRTEMP
				ora #BITON2 			; FORCE PRIMARY STACK
				and #BITOFF3 			; AND WRITE ENABLE
				sta E.REG
				lda SIRTEMP
				pha
				lda Z.REG
				pha
				lda #$00
				sta Z.REG 				; SET ZERO PAGE := $00
				stx SIRARGS
				sty SIRARGS+1 			; SET POINTER TO TABLE
*
				ldy #$00
DSIR010			lda (SIRARGS),Y 		; GET SIR NUMBER
				tax
				cpx #SIRTBLSIZ
				bcs DSIR030
				iny
				lda SIRTABLE,X
				bpl DSIR030 			; VERIFY ALLOCATION
				cmp (SIRARGS),Y
				bne DSIR030
				iny
				iny
				iny
				iny
				cpy SIRARGSIZ
				bcc DSIR010
*
				ldy SIRARGSIZ
DSIR020			sec
				tya
				sbc #5
				tay
				bcc SIREXIT
				lda (SIRARGS),Y 		; GET SIR NUMBER
				tax
				lda #FALSE
				sta SIRTABLE,X
				beq DSIR020
*
DSIR030			sec
				bcs SIREXIT
*
* SUBROUTINE 'SELC800' IS CALLED TO SELECT THE C800 I/O EX-
* PANSION ADDRESS SPACE FOR A PERIPHERAL SLOT. ON ENTRY,
* THE SLOT NUMBER IS PASSED IN THE ACCUMULATOR. IF NO
* ERROR OCCURS, CARRY IS CLEARED; OTHERWISE, CARRY IS SET
* AND THE PREVIOUS SLOT REMAINS SELECTED.
*
* PARAMETERS:
* A: SLOT NUMBER
*
* NORMAL EXIT -- NEW SLOT SELECTED
* CARRY: CLEAR
* A: UNDEFINED
* X, Y: UNCHANGED
*
* ERROR EXIT -- SLOT NOT CHANGED
* CARRY: SET
* A, X, Y: UNCHANGED
*
* WARNING !!!
* 'SELC800' USES SELF-MODIFYING CODE!
*
SELC800			cmp	#$05 				; CHECK SLOT NUMBER
				bcs	SC8EXIT 			; INVALID
				php
				sei
				sta	EXPNSLOT
				ora	#$C0 				; MAKE SLOT INTO $CN00
				sta	CNADDR+2 			; AND MODIFY BIT ADDRESS
				bit	$C020
				bit	$CFFF 				; DESELECT PREVIOUS SLOT
CNADDR			bit $C0FF 				; AND SELECT CURRENT SLOT
				plp
SC8EXIT			rts
*
* THE SUBROUTINES NMIDSBL AND NMIENBL ARE CALLED TO
* DISABLE AND ENABLE NMI, RESPECTIVELY. THERE ARE NO
* INPUT PARAMETERS. ON EXIT, THE REGISTERS ARE UN-
* DEFINED. NMIDSBL CLEARS THE CARRY FLAG IF NMI WAS
* SUCCESSFULLY DISABLED; OTHERWISE, CARRY IS SET.
*
NMIDSBL			ldx	E.REG
				bit	NMIFLAG
				bpl	NDS020
				txa
				ora	#BITON7
				sta	E.REG ;SET 1MHZ
				lda	#$00
				sta	NMICNTR
				sta	NMICNTR+1

NDS010			bit NMIFLAG 			; NMI PENDING?
				bpl	NDS020 				; NO
				inc	NMICNTR 			; BUMP NMI COUNTER
				bne	NDS010				; AND RECHECK NMI FLAG
				inc	NMICNTR+1
				bne	NDS010
				lda	#NMIHANG 			; CAN'T LOCK NMI
				jsr	SYSDEATH

NDS020			txa ;GET E.REG
				and	#BITOFF4 			; DISABLE NMI
				sta	E.REG
				rts
*
*
*
NMIENBL			lda	E.REG
				ora	#BITON4 			; ENABLE NMI
				sta	E.REG
				rts
*
* BY DEFAULT, KEYBOARD NMI IS IGNORED. THE USER MAY
* PROCESS NMI BY CHANGING THE ADDRESS IN SYSTEM GLOBAL.
*
NMIDBUG			tsx  					; SAVE THE STACK POINTER
				stx NMISPSV
				lda #$03 				; SELECT MONITOR'S ZERO PAGE
				sta Z.REG
				lda E.REG
				ora #$03 				; SELECT MONITOR ROM
				sta E.REG
				jsr $F901 				; CALL THE MONITOR
*
NMICONT			lda E.REG
				ora #BITON2 			; FORCE PRIMARY STACK
				sta E.REG
				ldx NMISPSV
				txs						; RESTORE STACK POINTER
				rts
*
* THE EVENT QUEUE IS USED TO HOLD THE PARAMETERS OF EVENTS
* THAT HAVE BEEN DETECTED BUT NOT YET RECOGNIZED. EVENT
* QUEUE ENTRIES ARE ORGANIZED INTO TWO LINKED LISTS; A FREE
* LIST AND AN ACTIVE LIST. EACH ENTRY IS SIX BYTES LONG,
* WITH THE FIRST BYTE (BYTE 0) USED AS A LINK. THE LINK
* BYTE CONTAINS THE TABLE INDEX OF THE NEXT ENTRY IN THE
* LIST. BECAUSE OF THE INDEXING METHOD, THE EVENT QUEUE
* MUST NOT EXCEED 256 BYTES.
*
* ENTRY ZERO IS A SPECIAL ENTRY. BYTE 0 IS THE INDEX OF
* THE FIRST ACTIVE ENTRY; BYTE 1 CONTAINS A ZERO, ALLOWING
* ENTRY 0 TO BE USED AS THE ACTIVE EVENT LIST TERMINATER;
* BYTE 2 CONTAINS THE INDEX OF THE FIRST FREE ENTRY; AND
* BYTES 4 THROUGH 6 ARE UNUSED.
*
* THE FREE LIST IS LINKED LIFO. THE ONLY VALID BYTE IN A
* FREE ENTRY IS THE LINK BYTE; THE REMAINING BYTES ARE
* UNDEFINED. THE FREE LIST IS TERMINATED BY A LINK BYTE
* CONTAINING A ZERO.
*
* THE ACTIVE LIST IS LINKED IN DECREASING PRIORITY ORDER
* WITH ENTRIES OF EQUAL PRIORITY LINKED FIFO. BYTES 1
* THROUGH 5 CONTAIN THE EVENT PRIORITY, EVENT ID, LOW BYTE
* OF THE EVENT ADDRESS, HIGH BYTE OF THE EVENT ADDRESS, AND
* THE ADDRESS BANK. THE ACTIVE LIST IS TERMINATED BY AN
* ENTRY WITH AN EVENT PRIORITY OF ZERO.
*
* SUBROUTINE 'QUEEVENT' IS USED TO ENTER AN EVENT INTO THE
* EVENT QUEUE. ACTIVE EVENTS ARE LINKED IN DECREASING
* PRIORITY ORDER WITH EVENTS OF EQUAL PRIORITY LINKED FIFO.
* EVENTS ARE REMOVED FROM THE QUEUE AS THEY ARE RECOGNIZED
* BY THE DISPATCHER.
*
* PARAMETERS:
* X: EVENT PARAMETER ADDRESS (LOW BYTE)
* Y: EVENT PARAMETER ADDRESS (HIGH BYTE)
*
* EVENT 0 1 2 3 4
* PARMS: +-------+-------+-------+-------+ +
* | PRI | ID | ADR.L | ADR.H | ADR.B |
* +-------+-------+-------+-------+-------+
* PRI: EVENT PRIORITY
* ID: EVENT ID BYTE
* ADR: EVENT ADDRESS (LOW, HIGH, BANK)
*
* EXIT CONDITIONS:
* CARRY: CLEAR
* A, X, Y: UNDEFINED
*
QUEEVENT		clc
				php
				sei
				lda	E.REG
				sta	QEVTEMP
				ora	#BITON2 			; FORCE PRIMARY STACK
				and #BITOFF3 			; AND WRITE ENABLE
				sta E.REG
				lda QEVTEMP
				pha
				lda Z.REG
				pha
				lda #0
				sta Z.REG 				; SET ZERO PAGE := 0
*
				stx QEVARGS
				sty QEVARGS+1 			; SET ARGUMENT POINTER
				ldy #0
				lda (QEVARGS),Y 		; GET PRIORITY
				beq Q.EXIT 				; IGNORE IF ZERO
*
				ldx EVQ.FREE
				beq Q.FULL
				stx QEV.THIS 			; GET FIRST FREE ENTRY
				lda EVQ.LINK,X 			; AND DELINK IT
				sta EVQ.FREE
*
				ldy #EVQ.SIZ-2

QEV010			lda (QEVARGS),Y 		; COPY ARGUMENTS
				sta EVQ.BANK,X 			; INTO NEW ENTRY
				dex
				dey
				bpl QEV010
*
				ldx QEV.THIS
				ldy #0

QEV020			sty QEV.LAST
				lda EVQ.LINK,Y
				tay
				lda EVQ.PRI,Y 			; SCAN EVENT QUEUE
				cmp EVQ.PRI,X 			; FOR PROPER POSITION
				bcs QEV020
*
				tya
				sta EVQ.LINK,X 			; RELINK EVENT INTO QUEUE
				txa
				ldy QEV.LAST
				sta EVQ.LINK,Y
*
Q.EXIT			pla
				sta Z.REG 				; RESTORE Z REGISTER
				pla
				sta E.REG 				; RESTORE E REGISTER
				plp
				rts
*
Q.FULL			lda #EVQOVFL 			; EVENT QUEUE OVERFLOW
				jsr SYSDEATH
*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.13/sos.s.ipl
LOAD /A3OSX.BUILD/SOS.13/sos.s
ASM
