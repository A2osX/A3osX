NEW
AUTO 3,1
*--------------------------------------

*************************************************************************
* APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.SRC
*************************************************************************
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT

*				.TI 'SOS 1.1 DISK /// DRIVER'
TEST			.eq 0 ;FOR FUNNY-MODE TESTING
* INCLUDE SOSORG,6,1,254
				.do TEST
				.ph $2000 FIXME: check if we need this
				.else
* REL
				.ph ORGDISK3 FIXME: check if we need this
				.fin
ZZORG			.eq *
				.as '-'
* FIXME - MSB OFF
*
* REP 40
* COPYRIGHT (C) APPLE COMPUTER INC.
* ALL RIGHTS RESERVED
* REP 40
*
REV0ROM			.eq 0 ;1=SUPPORT REV0 ROM
*
				.do 1-TEST
* ENTRY DIB1 ;DIB1
* ENTRY DIB2 ;DIB2
* ENTRY DIB3 ;DIB3
* ENTRY DIB4 ;DIB4
* ENTRY SEEKDSK3 ;SEEK CURRENT DRIVE
*
* EXTRN SYSERR
*
* EXTRN XREQCODE
* EXTRN XBADOP
* EXTRN XNODRIVE
* EXTRN XIOERROR
* EXTRN XNOWRITE
* EXTRN XBYTECNT
* EXTRN XBLKNUM
* EXTRN XDISKSW
* EXTRN XCTLCODE
*
* EXTRN E1908 ; GLOBAL FLAG FOR MOUSE DRIVER
* TO SAY WE CANNOT BE INTERRUPTED
*
				.else
XREQCODE		.eq $20
XBADOP			.eq $26
XNODRIVE		.eq $28
XIOERROR		.eq $27
XNOWRITE		.eq $2B
XBYTECNT		.eq $2C
XBLKNUM			.eq $2D
XDISKSW			.eq $2E
XCTLCODE		.eq $21
				.fin
* PAGE
* DISK /// CONTROLLER EQUATES:
*
* MOTOR SELECT BITS:
*
* DRIVE INT EXT1 EXT2
* ----- --- ---- ----
* .D1 1 X X
* .D2 X 0 1
* .D3 X 1 0
* .D4 X 1 1
*
MS.INT			.eq $C0D4 ;MOTOR SELECT:INTERNAL DRIVE
MD.INT			.eq $C0D5 ;MOTOR DESELECT:INTERNAL DRIVE
*
MS.EXT1			.eq $C0D3 ;MOTOR SELECT:EXTERNAL DRIVE
MS.EXT2			.eq $C0D1 ;MOTOR SELECT:EXTERNAL DRIVE
MD.EXT1			.eq $C0D2 ;MOTOR DESELECT:EXTERNAL DRIVE

MD.EXT2			.eq $C0D0 ;MOTOR DESELECT:EXTERNAL DRIVE
*
IS.INT			.eq $C0EA ;I/O SELECT:INTERNAL DRIVE
IS.EXT			.eq $C0EB ;I/O SELECT:EXTERNAL DRIVE
*
NOSCROLL		.eq $C0D8 ;SMOOTHSCROLL OFF
*
MOTOROFF		.eq $C0E8 ;MOTOR(S) START POWEROFF T/O
MOTORON			.eq $C0E9 ;MOTOR(S) POWER ON
Q6L			.eq $C08C ;Q7L,Q6L=READ
Q6H			.eq $C08D ;Q7L,Q6H=SENSE WPROT
Q7L			.eq $C08E ;Q7H,Q6L=WRITE
Q7H			.eq $C08F ;Q7H,Q6H=WRITE STORE
*
* OTHER EQUATES:
*
E.REG			.eq $FFDF ;ENVIRONMENT REGISTER
E.IER			.eq $FFEE ;INTERRUPT ENABLE REGISTER
*
* RETRY COUNTERS:
*
R.RECAL			.eq 1 ;MAX RECALIBRATES
* R.RECAL MUST NOT BECOME ZERO! (MOUSE WILL BE LOCKED OUT)
* SEE DISK3.SIO.SRC LINE 14 FOR DETAIL
R.FIND			.eq 3 ;MAX REVS TO FIND A SECTOR
R.IOERR			.eq 4 ;MAX RETRIES ON READ ERROR
R.IRQ			.eq 6 ;MAX IRQ'S TOLERATED BEFORE SEI
* PAGE
* ZPAGE EQUATES FOR CORE ROUTINES:
*
*				DSECT FIXME: find .or address
				.ph $81 FIXME: check if we need this
IBSLOT			.bs 1 ;SLOT=$60 FOR RTNS
				.bs 7 ;N/A
				.bs 1 ;RDADR:CHECKSUM
				.bs 1 ;N/A
IMASK			.bs 1 ;BIT7 SET IF IRQ ALLOWED
CURTRK			.bs 1 ;SEEK:CURRENT TRACK
				.bs 2 ;N/A
INTRTRY			.bs 1 ;READ: IRQ RETRY COUNT
				.bs 5 ;N/A
				.bs 1 ;RDADR:'MUST FIND' COUNT
				.bs 1 ;READ,WRITE: CHECKSUM
CSSTV			.bs 4 ;RDADR:CKSUM,SEC,TRK,VOL
MONTIMEL		.eq CSSTV+2 ;MSWAIT:MOTOR-ON TIME
MONTIMEH		.eq MONTIMEL+1
BUF			.bs 2 ;PRENIB,POSTNIB:USER BUFFER
				.bs 1 ;SEEK:PRIOR PHASE
TRKN			.bs 1 ;SEEK:TARGET TRACK
*
* LOCAL TEMPS:
*
				.ph $D0 ;WE'RE ALLOWED TO $FF FIXME: check if we need this
BLKTEMP			.bs 2 ;LOCAL TEMP FOR BLKNUMBER
BUFTEMP			.bs 2 ;LOCAL TEMP FOR BUFFER ADDRESS
TRACK			.bs 1 ;LOCAL TEMP FOR TRACK
SECTOR			.bs 1 ;LOCAL TEMP FOR SECTOR
RETRYADR		.bs 1 ;LOCAL TEMP FOR SECTOR-FIND RETRIES
RETRYCNT		.bs 1 ;LOCAL TEMP FOR I/O RETRIES
RECALCNT		.bs 1 ;LOCAL TEMP FOR RECAL COUNT
BLKCOUNT		.bs 1 ;BLKS REQD TO SATISFY BYTECOUNT
SEEKWAIT		.bs 1 ;<>0 IF SEEK DELAY NEEDED
IRQMASK			.bs 1 ;ENTRY 'I' BIT
TEMP			.bs 1 ;JUST A TEMP
				.ep 
* PAGE
* DRIVER INTERFACE AREA:
*
*				DSECT FIXME: find .or address
				.ph $C0 FIXME: check if we need this
D.COMMAND		.bs 1 ;COMMAND CODE
D.UNITNUM		.bs 1 ;UNIT NUMBER
D.BUFL			.bs 2 ;BUFFER ADDRESS
D.BUFH			.eq D.BUFL+1
D.STATCODE		.eq D.BUFL ;DSTATUS CODE
D.STATBUF		.eq D.BUFH ;^DSTATUS LIST
D.BYTES			.bs 2 ;BYTECOUNT
D.BLOCK			.bs 2 ;REQUESTED BLOCKNUM
D.BYTRD			.bs 2 ;BYTES READ (READ)
				.bs 6 ;SPARES (OK AS TEMPS)
				.ep 

* PAGE
DIB1			.eq * ;DIB FOR .D1
				.da DIB2 ;FLINK
				.da MAIN ;ENTRY POINT
				.hs 03 ;NAME LENGTH
				.as '.D1 '
				.hs 80 ;DEVNUM: ACTIVE
				.hs 00 ;SLOT
				.hs 00 ;UNIT NUMBER
				.hs E1,01,00 ;TYPE,SUB,FILLER
				.da 280 ;BLOCKCOUNT
				.da 1 ;MANUFACTURER=APPLE
				.da $1100 ;VERSION=1.1
*
DIB2			.eq * ;DIB FOR .D2
				.da DIB3 ;FLINK
				.da MAIN ;ENTRY POINT
				.hs 03 ;NAME LENGTH
				.as '.D2 '
				.hs 80 ;DEVNUM: ACTIVE
				.hs 00 ;SLOT
				.hs 01 ;UNIT NUMBER
				.hs E1,01,00 ;TYPE,SUB,FILLER
				.da 280 ;BLOCKCOUNT
				.da 1 ;MANUFACTURER=APPLE
				.da $1100 ;VERSION=1.1
*
DIB3			.eq * ;DIB FOR .D3
				.da DIB4 ;FLINK
				.da MAIN ;ENTRY POINT
				.hs 03 ;NAME LENGTH
				.as '.D3 '
				.hs 80 ;DEVNUM: ACTIVE
				.hs 00 ;SLOT
				.hs 02 ;UNIT NUMBER
				.hs E1,01,00 ;TYPE,SUB,FILLER
				.da 280 ;BLOCKCOUNT
				.da 1 ;MANUFACTURER=APPLE
				.da $1100 ;VERSION=1.1
*
DIB4			.eq * ;DIB FOR .D4
				.da 0 ;NO FLINK
				.da MAIN ;ENTRY POINT
				.hs 03 ;NAME LENGTH
				.as '.D4 '
				.hs 80 ;DEVNUM: ACTIVE
				.hs 00 ;SLOT
				.hs 03 ;UNIT NUMBER
				.hs E1,01,00 ;TYPE,SUB,FILLER
				.da 280 ;BLOCKCOUNT
				.da 1 ;MANUFACTURER=APPLE
				.da $1100 ;VERSION=1.1
				.da 1 ;MANUFACTURER=APPLE
				.da $1100 ;VERSION=1.1

* CHN DISK3.MAIN.SRC
* INCLUDE SOSORG,6,1,254

*************************************************************************
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.SRC
*************************************************************************





*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.ORIG/SOS.S.DISK3
LOAD /A3OSX.BUILD/SOS.ORIG/SOS.S
ASM
