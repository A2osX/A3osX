NEW
AUTO 3,1
*--------------------------------------

*************************************************************************
* APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.SIO.SRC
*************************************************************************
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT

* PAGE
* REP 40
* NAME : SECTORIO
* FUNCTION: READ OR WRITE A SECTOR
* INPUT : IBSTRK, IBSECT, MONTIME,
* RETURNS : CARRY CLEAR IF OK (AC=00)
* : CARRY SET IF ERROR (AC=ERRCODE)
* : SEEKWAIT ALL SETUP
* DESTROYS: ALL REGISTERS
* REP 40
*
SECTORIO		.eq *
				lda #R.RECAL ;SETUP THE
* R.RECAL MUST BE NON-ZERO!! (SEE BELOW)
				sta RECALCNT ; RECAL TRIES
				nop ; PAD ONE BYTE
				sta E1908 ; A-REG MUST BE NON-ZERO !!!
* E1908 = NON-ZERO LOCKOUT MOUSE
*
				ldy D.UNITNUM ;ARE WE ON-TRACK?
				lda TRACK
				cmp DRVTRACK,Y
				beq SOUGHT ;=>IF SO, FORGET SEEK & DELAY!
*
* WAIT BEFORE STEPPING:
*
				lda SEEKWAIT ;SEEK DELAY NEEDED?
				beq GOSEEK ;=>NAW...
				lda #0
				sta SEEKWAIT ;CLEAR THE FLAG
				lda #4 ;ADD SEEKDELAY TO
				jsr ADDTIME ; THE TOTAL UPTIME(S)
				tay ;4*25 MS DELAY
SEEKDEL			.eq *
				lda #0
				jsr MSWAIT
				dey 
				bne SEEKDEL
*
* ISSUE THE SEEK:
*
GOSEEK			.eq *
				lda TRACK ;GET DESTINATION TRACK
				jsr MYSEEK ;=>..AND YOU SHALL FIND...
*
SOUGHT			.eq *
				lda IRQMASK ;SET IRQ MASK FOR
				sta IMASK ; CORE ROUTINES
				lda #R.IRQ ;SETUP IRQ RETRIES
				sta INTRTRY
				lda #R.IOERR ; AND ERROR RETRIES
				sta RETRYCNT
*
* DELAY FOR ANY REMAINING MOTOR-UP TIME:
*
MDELAY			.eq *
				lda MONTIMEH ;ANY TIME REMAINING?
				bpl FINDIT ;=>NO, WE'RE UP TO SPEED.
				lda #1 ;YES, SO BUMP A SLICE OF
				jsr ADDTIME ; UPTIME WHILE WE WAIT
				lda #0
				jsr MSWAIT
				jmp MDELAY ;=>GO TILL ENOUGH
*
* FIND THE DESIRED SECTOR:
*
* NOTE: FINDSECT RETURNS WITH
* IRQ INHIBITED!
*
FINDIT			.eq *
				php ;INHIBIT IRQ WHILE

				sei ; MESSING WITH VBL FLAGS
				lda E.IER ;DISABLE VBL IRQ
				and #$18 ; DURING SECTOR I/O
				sta E.IER
				ora #$80 ;FOR 'SET' LATER
				sta VBLSAVE
				plp ;RESTORE IRQ STATUS
				jsr FINDSECT ;FIND ME PLEASE
				bcs TRYRECAL ;=>NO? RECAL OR GIVE UP!
				ldx #$60 ;SET UP SLOT FOR CORE RTNS
				lda D.COMMAND ;WHAT'S YOUR PLEASURE?
				bne SIOWRITE ;=>WRITE
*
* REP 40
* READ A SECTOR:
*
				jsr READ ;READ THAT SECTOR
				jsr FIXIRQ ;ENABLE IRQ IF OK
				lda VBLSAVE ;ALLOW VBL DURING
				sta E.IER ; POSTNIB
				bcs BADIO ;=>I/O ERR OR IRQ
				lda E.REG ;SET 2MHZ FOR POSTNIB
				and #$7F
				sta E.REG
				jsr POSTNIB ;POSTNIB/CHECKSUM
				bcs IORETRY ;=>I/O ERR:BAD CHKSUM
				jmp SIOGOOD ;=>GOOD READ
*
* REP 40
* WRITE A SECTOR:
*
SIOWRITE		.eq *
				jsr WRITE ;WRITE THE DATA
				jsr FIXIRQ ;RE-ENABLE IRQ IF OK
				lda VBLSAVE ;RESTORE
				sta E.IER ; VBL IRQ
				bcc SIOGOOD ;=>GOOD WRITE
				bvc SIOWPROT ;=>WRITE PROTECTED
*
* REP 40
* IT DIDN'T GO WELL FOR US:
*
BADIO			.eq *
				.do 1-REV0ROM ;FOR REV1
				bvs FINDIT ;=>IRQ. JUST RETRY IT.
				.else ;FOR REV0
*
* THE REV1 ROM TAKES CARE OF THE
* IRQ RETRY COUNT, BUT REV0 DOESN'T:
*
				bvc IORETRY ;=>I/O ERROR. RETRY IT
				lda ROMREV ;WHICH ROM?
				bne FINDIT ;=>REV1. HE DOES IT.
				lda INTRTRY ;REV0. OUT OF RETRIES?
				bpl BADIO2 ;=>NO.
				sta IMASK ;SET HI BIT FOR IRQ MASK
BADIO2			.eq *
				dec INTRTRY ;ONE LESS RETRY
				jmp FINDIT ;=>RETRY AFTER IRQ
				.fin
*
* RETRY AFTER AN I/O ERROR:
*
IORETRY			.eq *
				dec RETRYCNT ;ANY RETRIES LEFT?
				bne FINDIT ;=>YEAH, RETRY AFTER ERROR
*
* RETRIES EXHAUSTED. RECALIBRATE:
*
TRYRECAL		.eq *
				lda VBLSAVE ;ALLOW VBL IF RECAL
				sta E.IER ; OR UNRECOVERABLE ERROR
				dec RECALCNT ;HAVE WE RECALIBRATED YET?
				bmi SIOERR ;=>YUP. WE'RE DEAD.
				jsr RECAL ;NO, TRY OUR LUCK
				ldy D.UNITNUM ;ARE WE ON-TRACK?
				lda TRACK
				cmp DRVTRACK,Y
				bne NOTSAME
				jmp SOUGHT ;=>IF SO, FORGET RESEEK
NOTSAME			.eq *

				jmp GOSEEK ;TRY AGAIN ON TARGET TRACK
*
* REP 40
SIOERR			.eq *
				lda #XIOERROR ;RETURN CODE
				sec ;INDICATE HARD ERROR
				bcs SIORET
SIOWPROT		.eq *
				lda #XNOWRITE ;RETURN CODE
				sec ;INDICATE HARD ERROR
				bcs SIORET
SIOGOOD			.eq *
				lda #0
				clc ;INDICATE GOOD COMPLETION
SIORET			ldx #0 ; SAY OK TO MOUSE
				stx E1908 ; WITH THIS GLOBAL $1908
				rts 
* PAGE
* REP 40
* NAME : FINDSECT
* FUNCTION: LOCATE A DESIRED SECTOR
* INPUT : IBTRK, IBSECT SETUP
* RETURNS : CARRY CLEAR IF OK,
* : CARRY SET IF ERROR.
* DESTROYS: ALL REGISTERS & 'TEMP'
* NOTE : RETURNS WITH IRQ DISABLED IF NO ERROR!
* REP 40
*
FINDSECT		.eq *
				lda #R.FIND*16 ;SETUP NUMBER OF REVS
				sta RETRYADR ; ALLOWED TO FIND SECTOR
				lsr TEMP ;COMPUTE LATENCY FIRST TIME THRU
FINDSEC2		.eq *
				ldx #$60 ;FAKE SLOT FOR CORE ROUTINES
				jsr RDADR ;GET NEXT ADDRESS FIELD
				bcs RDADERR ;=>UGH! AN ERROR!
*
* MAKE SURE WE'RE ON THE CORRECT TRACK:
*
				lda TRACK ;IS IT
				cmp CSSTV+2 ; CORRECT TRACK?
				bne FINDERR ;=>NO?!? IT'S USELESS!
				lda SECTOR ;IS IT
				cmp CSSTV+1 ; DESIRED SECTOR?
				beq FINDGOOD ;=>YEAH. GOT IT!
*
* COMPUTE LATENCY. EACH TWO-SECTOR
* DISTANCE IS 25 MS OF UPTIME.
*
				lda TEMP ;LATENCY ALREADY COMPUTED?
				bmi RDADERR ;=>YES.
				lda SECTOR ;HOW FAR AWAY IS OUR
				sec ; DESIRED SECTOR?
				ror TEMP ;PREVENT RECOMPUTATION
				sbc CSSTV+1
				and #$0F
				lsr
				jsr ADDTIME
*
* KEEP LOOKING TILL WE FIND IT:
*
RDADERR			.eq *
				jsr FIXIRQ ;ENABLE IRQ IF APPROPRIATE
				dec RETRYADR ;ANY RETRIES LEFT?
				beq FINDERR ;=>NO, WE CAN'T FIND IT.
*
* COMPENSATE FOR A BUG IN RDADR: IF WE TRY
* TO CALL RDADR AGAIN BEFORE THE DATA MARK
* GOES BY, THEN RDADR WILL ACCIDENTALLY CALL
* THAT AN ERROR. WE CAN AVOID THIS 'FAKE'
* ERROR BY DELAYING PAST THE DATA MARK.
				ldy #200 ;1 MS IS PLENTY
ADRDELAY		.eq *
				dey 
				bne ADRDELAY
				jmp FINDSEC2 ;=>NOW TRY LOOKING AGAIN
*
* REP 40
FINDGOOD		.eq *
				lda #0 ;CLEAR VOLNUM OUT OF
				sta MONTIMEH ; MOTORTIME!

				clc ;INDICATE NO ERROR
				rts 
*
FINDERR			.eq *
				jsr FIXIRQ ;ENABLE IRQ IF APPROPRIATE
				lda #0 ;CLEAR VOLNUM OUT OF
				sta MONTIMEH ; MOTORTIME!
				sec ;INDICATE THE ERROR
				rts 

* CHN DISK3.USEL.SRC

*************************************************************************
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: DISK3.SIO.SRC
*************************************************************************





*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS.ORIG/SOS.S.DISK3.SIO
LOAD /A3OSX.BUILD/SOS.ORIG/SOS.S
ASM
