NEW
AUTO 3,1
*--------------------------------------

*************************************************************************
* APPLE /// SOS 1.3 SOURCE CODE FILE: DEVMGR.SRC
*************************************************************************
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT

*				.TI "SOS 1.1 DEVICE MANAGER"
* REL
* INCLUDE SOSORG,6,1,254
				.ph ORGDMGR FIXME: check if we need this
ZZORG			.eq *
* FIXME - MSB OFF
* REP 100
* COPYRIGHT (C) APPLE COMPUTER INC. 1980
* ALL RIGHTS RESERVED
* REP 100
*
* DEVICE MANAGER (VERSION = 1.1O )
* (DATE = 8/04/81)
*
* THIS MODULE IS RESPONSIBLE FOR CALLING THE CORRECT DEVICE
* DRIVER WHEN A D.READ...D.INIT SYSTEM CALL IS MADE.
* (NOTE: D.OPEN,D.CLOSE AND D.INIT ARE ONLY CALLABLE FROM
* INSIDE THE OPERATING SYSTEM). D.INFO AND GET.DNUM CALLS
* ARE HANDLED INSIDE THIS MODULE. REPEAT.IO BYPASSES THIS MODULE.
* REP 100
*
* ENTRY DMGR
*
* ENTRY MAX.DNUM
* ENTRY SDT.SIZE
* ENTRY SDT.DIBL
* ENTRY SDT.DIBH
* ENTRY SDT.ADRL
* ENTRY SDT.ADRH
* ENTRY SDT.BANK
* ENTRY SDT.UNIT
* ENTRY BLKD.SIZE
* ENTRY BLKDLST
*
* EXTRN SYSERR
* EXTRN SERR
* EXTRN NODNAME
* EXTRN BADDNUM
* EXTRN SYSDEATH
* EXTRN BADSYSCALL
*
* EXTRN SXPAGE
*
* E.REG EQU $FFDF ; ENVIRONMENT REGISTER
* B.REG EQU $FFEF ; BANK REGISTER
* PAGE
* REP 100
*
* SYSTEM DEVICE TABLE (SDT)
*
* CONTAINS THE ADDRESS OF EACH DRIVER'S DIB (SDT.DIB), THE
* ADDRESS OF EACH DRIVER'S ENTRY POINT (SDT.ADR), AND THE
* UNIT # OF EACH DRIVER (SDT.UNIT). THE TABLE IS INDEXED
* BY DEVICE NUMBER. ENTRY 0 IS RESERVED FOR FUTURE USE.
*
* REP 100
*
SDT.SIZE		.eq 25
*
MAX.DNUM		.bs 1 ;MAX DEV NUMBER IN SYSTEM+1
SDT.DIBL		.bs SDT.SIZE ;ADR OF DEVICE INFORMATION BLOCK
SDT.DIBH		.bs SDT.SIZE
*
SDT.ADRL		.bs SDT.SIZE ;ADR OF ENTRY POINT
SDT.ADRH		.bs SDT.SIZE
*
SDT.BANK		.bs SDT.SIZE ;BANK # OF DEVICE
*
SDT.UNIT		.bs SDT.SIZE ;UNIT # OF DRIVER
*
* REP 100

* BLOCK DEVICE LIST TABLE
*
BLKD.SIZE		.eq 13
BLKDLST			.da 00
				.bs BLKD.SIZE-1
* PAGE
* REP 100
*
* DATA DECLARATIONS
*
* REP 100
*
D.TPARMX		.eq $C0
REQCODE			.eq D.TPARMX
*
* D.READ/WRITE/CTRL/STATUS/OPEN/CLOSE/INIT/REPEAT PARMS
*
DNUM			.eq D.TPARMX+1
*
* D.INFO PARMS
*
I.DNUM			.eq D.TPARMX+1
I.DNAME			.eq D.TPARMX+2
I.DLIST			.eq D.TPARMX+4
I.LENGTH		.eq D.TPARMX+6
*
* GET.DEV.NUM PARMS
*
G.DNAME			.eq D.TPARMX+1
G.DNUM			.eq D.TPARMX+3
*
* SDT ENTRY (=DIB) FIELDS
*
DIB.SLOT		.eq $11 ;DIB'S DEVICE SLOT FIELD
DIB.DTYPE		.eq $13 ;DIB'S DEVICE TYPE FIELD
*
SDTP			.eq D.TPARMX+$10 ; PTR TO CURRENT SDT ENTRY
* PAGE
* REP 100
*
* DEVICE MANAGER (MAIN ENTRY POINT)
*
* REP 100
DMGR			.eq *
*
				lda REQCODE
				cmp #4
				bcc DRIVER ; D.READ/WRITE/CTRL/STATUS CALL
				bne DM000
				jmp GET.DNUM ; GET.DEV.NUM CALL
DM000			cmp #5
				beq D.INFO ; D.INFO CALL
				cmp #$A
				bcc DRIVER ; D.OPEN/CLOSE/INIT
				lda #BADSYSCALL ; ELSE FATAL ERROR
				jsr SYSDEATH ; EXIT
* PAGE
* REP 100
* D.READ/WRITE/CTRL/STATUS/OPEN/CLOSE/INIT CALLS
* "JSR" TO DEVICE DRIVER
* REP 100
DRIVER			.eq *
*
				ldx DNUM ; GET DNUM SYSCALL PARM
				beq DM005 ; WITHIN BOUNDS?
				cpx MAX.DNUM ; "
				bcc DM010
*
* DNUM TOO LARGE
*
DM005			lda #BADDNUM ; INVALID DEVICE NUMBER
				jsr SYSERR ; ERROR EXIT
*
* MAP DEV# TO UNIT#
*
DM010			lda SDT.UNIT,X
				sta DNUM
*
* "JSR" TO DEVICE DRIVER VIA JMP TABLE
*
				lda B.REG ; STACK B.REG

				pha 
				lda /DM.RTN-1 ; STACK RETURN ADDRESS
				pha 
				lda #DM.RTN-1
				pha 
*
				lda SDT.BANK,X ; SELECT RAM BANK
				sta B.REG
				lda SDT.ADRH,X ; STACK DRIVER ENTRY POINT ADDRESS
				pha 
				lda SDT.ADRL,X
				pha 
*
				lda E.REG ; SWITCH IN I/O BANK
				ora #$40
				sta E.REG
				rts ; AND, "JSR" TO DEVICE DRIVER
*
DM.RTN			lda E.REG ; SWITCH OUT I/O BANK
				and #$BF
				sta E.REG
				pla ; RESTORE B.REG
				sta B.REG
				sec 
				lda SERR ; RETRIEVE ERROR CODE
				bne DM017 ; ENSURE CARRY CLEARED IF NO ERROR
				clc 
DM017			rts ; AND, EXIT TO CALLER
* PAGE
* REP 100
* D.INFO(IN.DNUM, OUT.DNAME, OUT.DEVLIST, IN.LENGTH) SYSTEM CALL
* REP 100
D.INFO			.eq *
*
				ldx I.DNUM ; GET DNUM PARM
				beq DM020 ; WITHIN BOUNDS?
				cpx MAX.DNUM ; "
				bcc DM030
DM020			lda #BADDNUM ; NO, DNUM TOO LARGE
				jsr SYSERR ; ERROR EXIT
*
* MOVE PARMS FM SDT ENTRY (DEV INFO BLOCK) TO CALLER'S
* PARM LIST
*
DM030			jsr SETUP.SDT ; SET UP ZPAGE PTR TO SDT ENTRY
*
* OUPUT DNAME PARM
*
				lda (SDTP),Y ; LOAD PARM'S BYTE COUNT
				tay 
DM040			lda (SDTP),Y
				sta (I.DNAME),Y
				dey 
				bpl DM040
*
* OUTPUT DEVINFO PARM (SLOT,UNIT,DEVID,PRODCODE)
*
				lda #DIB.SLOT
				clc ; ADVANCE SDTP TO 2ND PARM IN SDT
				adc SDTP
				sta SDTP
				bcc DM045
				inc SDTP+1
DM045			ldy I.LENGTH ; LOAD BYTE COUNT
				beq DM.EXIT ; IF 0 THEN DONE
				dey 
				cpy #$B
				bcc DM050
				ldy #$A
DM050			lda (SDTP),Y
				sta (I.DLIST),Y
				dey 
				bpl DM050
*
DM.EXIT			clc
				rts ; NORMAL EXIT
* PAGE
* REP 100
* GET.DEV.NUM(IN.DNAME; OUT.DNUM) SYSTEM CALL
* REP 100
*

GET.DNUM		.eq *
*
				ldx #1 ; SETUP PTR TO 1ST SDT ENTRY
*
DM070			jsr SETUP.SDT ; SET UP ZPAGE PTR TO SDT ENTRY
*
				lda (SDTP),Y ; COMPARE DNAME LENGTHS
				cmp (G.DNAME),Y
				bne NXTSDT
*
				tay ; LENGTHS MATCH, NOW COMPARE CHARS
DM080			lda (G.DNAME),Y
				cmp #$60
				bcc DM090
				and #$DF ; UPSHIFT
DM090			cmp (SDTP),Y
				bne NXTSDT
				dey 
				bne DM080
*
				txa ; CHARS MATCH
				ldy #0
				sta (G.DNUM),Y ; OUTPUT DEV NUM PARM
				ldy #DIB.DTYPE ; SET "N" FLAG IN STATUS REG.
				lda (SDTP),Y ; N=1(BLOCK DEVICE) N=0(CHAR DEVICE)
				clc 
				rts ; NORMAL EXIT
*
NXTSDT			inx ; LAST SDT ENTRY?
				cpx MAX.DNUM
				bcc DM070
*
				lda #NODNAME ; ERROR, DNAME NOT FOUND IN SDT
				jsr SYSERR ; RETURN TO CALLER
* PAGE
* REP 100
* SETUP.SDT(IN.X=DNUM, OUT.SDTP, B.REG, Y=0) X="UNCHANGED"
* REP 100
SETUP.SDT		.eq *
				lda SDT.DIBL,X ; SET UP ZPAGE PTR TO SDT ENTRY
				sta SDTP ; (POINTS TO DNAME FIELD)
				lda SDT.DIBH,X
				sta SDTP+1
				lda SDT.BANK,X
				sta B.REG
				ldy #0
				sty SXPAGE+SDTP+1
				rts 
*
* LST ON
ZZEND			.eq *
ZZLEN			.eq ZZEND-ZZORG
* IFNE ZZLEN-LENDMGR
* FAIL 2,"SOSORG FILE IS INCORRECT FOR DEVMGR"
* FIN

*************************************************************************
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: DEVMGR.SRC
*************************************************************************




*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS/SOS.S.DEVMGR
LOAD /A3OSX.BUILD/SOS/SOS.S
ASM
