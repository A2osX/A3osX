NEW
AUTO 3,1
*--------------------------------------

*************************************************************************
* APPLE /// SOS 1.3 SOURCE CODE FILE: SYSGLOB.SRC
*************************************************************************
* ASSEMBLER: APPLE ][ 6502 ASSEMBLER from APPLE COMPUTER TOOLKIT

*				.TI "SOS 1.1 GLOBAL EQUATES"
* REL
				.ph $18FC FIXME: check if we need this
* FIXME - MSB OFF
* REP 60
* COPYRIGHT (C) APPLE COMPUTER INC. 1980
* ALL RIGHTS RESERVED
* REP 60
*
* SOS SYSTEM GLOBAL DATA & EQUATES
*
* THIS MODULE CONTAINS THE SOS JUMP TABLE, AND ALL GLOBAL
* DATA AND EQUATES. THE JUMP TABLE, AND ALL DATA THAT IS
* TO BE REFERENCED BY DEVICE HANDLERS, ARE ASSIGNED FIXED
* ADDRESSES AT THE BEGINNING OF MEMORY PAGE $19. DATA
* THAT IS ONLY REFERENCED BY SOS BEGINS $1980, BUT MAY BE
* MOVED WHENEVER SOS IS RELINKED.
*
* REP 60
*
* EXTRN ALLOCSIR
* EXTRN DEALCSIR
* EXTRN NMIDSBL
* EXTRN NMIENBL
* EXTRN QUEEVENT
* EXTRN SELC800
* EXTRN SYSDEATH
* EXTRN SYSERR
* EXTRN REQBUF
* EXTRN GETBUFADR
* EXTRN RELBUF
* EXTRN NMIDBUG
* EXTRN NMICONT
* EXTRN COLDSTRT
*
*
* ENTRY MEMSIZE
* ENTRY SYSBANK
* ENTRY SUSPFLSH
* ENTRY NMIFLAG
* ENTRY SCRNMODE
* ENTRY GRSIZE
*
* ENTRY SERR
* ENTRY DBUGBRK
* ENTRY KYBDNMI
* ENTRY NMISPSV
* ENTRY SDEATH.REGS
*
* ENTRY SOSVER
* ENTRY SOSVERL
*
* ENTRY SZPAGE
* ENTRY SXPAGE
* ENTRY SSPAGE
*
* ENTRY CZPAGE
* ENTRY CXPAGE
* ENTRY CSPAGE
* ENTRY CEVPRI
*
* ENTRY SIRTEMP
* ENTRY SIRARGSIZ
* ENTRY IRQCNTR
* ENTRY NMICNTR
* ENTRY QEVTEMP
* ENTRY QEV.THIS
* ENTRY QEV.LAST
*
* ENTRY BADBRK
* ENTRY BADINT1

* ENTRY BADINT2
* ENTRY NMIHANG
* ENTRY EVQOVFL
* ENTRY STKOVFL
* ENTRY BADSYSCALL
* ENTRY DEV.OVFLOW
* ENTRY MEM2SML
* ENTRY VCBERR
* ENTRY FCBERR
* ENTRY ALCERR
* ENTRY DIRERR
* ENTRY TOOLONG
* ENTRY BADBUFNUM
* ENTRY BADBUFSIZ
* ENTRY BITMAPADR
*
* ENTRY BADSCNUM
* ENTRY BADCZPAGE
* ENTRY BADXBYTE
* ENTRY BADSCPCNT
* ENTRY BADSCBNDS
*
* ENTRY NODNAME
* ENTRY BADDNUM
*
* ENTRY BADPATH
* ENTRY CFCBFULL
* ENTRY FCBFULL
* ENTRY BADREFNUM
* ENTRY PATHNOTFND
* ENTRY VNFERR
* ENTRY FNFERR
* ENTRY DUPERR
* ENTRY OVRERR
* ENTRY DIRFULL
* ENTRY CPTERR
* ENTRY TYPERR
* ENTRY EOFERR
* ENTRY POSNERR
* ENTRY ACCSERR
* ENTRY BTSERR
* ENTRY FILBUSY
* ENTRY NOTSOS
* ENTRY BADLSTCNT
* ENTRY OUTOFMEM
* ENTRY BUFTBLFULL
* ENTRY BADSYSBUF
* ENTRY DUPVOL
* ENTRY NOTBLKDEV
* ENTRY LVLERR
*
* ENTRY BADJMODE
*
* ENTRY BADBKPG
* ENTRY SEGRQDN
* ENTRY SEGTBLFULL
* ENTRY BADSEGNUM
* ENTRY SEGNOTFND
* ENTRY BADSRCHMODE
* ENTRY BADCHGMODE
* ENTRY BADPGCNT
*
* ENTRY XREQCODE
* ENTRY XCTLCODE
* ENTRY XCTLPARM
* ENTRY XNOTOPEN
* ENTRY XNOTAVAIL
* ENTRY XNORESRC
* ENTRY XBADOP
* ENTRY XIOERROR
* ENTRY XNODRIVE
* ENTRY XNOWRITE
* ENTRY XBYTECNT
* ENTRY XBLKNUM
* ENTRY XDISKSW
* ENTRY BACKMASK ; MASK BYTE FOR BACKUP BIT.
*
* ENTRY E1908 ; DISK DRIVER IS READING/WRITING (SET) ELSE NOT (RESET)
*
* PAGE
				.da SYSGLOB ;SYSGLOB TARGET ADDRESS

				.da $0100 ; AND LENGTH
*
* SYSTEM GLOBAL DATA
* (ACCESSIBLE TO SOS AND DEVICE HANDLERS)
*
SYSGLOB			.eq *
*
MEMSIZE			.da 08 ;MEMORY SIZE = 128K
SYSBANK			.da 02 ;SYSTEM BANK = 2
SUSPFLSH		.da 00 ;SYSOUT SUSPEND/FLUSH FLAG
NMIFLAG			.da 00 ;NMI PENDING FLAG
				.da NMIEXIT ;DEFAULT NMI VECTOR
SCRNMODE		.da 80 ;CURRENT SCREEN MODE
GRSIZE			.da 00
*
*
* SOS JUMP TABLE
*
				.bs SYSGLOB+$10-*,$00 ; USED BY THE MOUSE DRIVER
USERNMI			jmp NMIEXIT ;KEYBOARD NMI VECTOR
				jmp ALLOCSIR ;ALLOCATE A SIR
				jmp DEALCSIR ;DEALLOCATE A SIR
				jmp NMIDSBL ;DISABLE NMI
				jmp NMIENBL ;ENABLE NMI
				jmp QUEEVENT ;QUEUE AN EVENT
				jmp SELC800 ;SELECT I/O EXPANSION ROM
				jmp SYSDEATH ;SYSTEM DEATH
				jmp SYSERR ;SOS ERROR
				jmp REQBUF ;REQUEST BUFFER
				jmp GETBUFADR ;GET BUFFER'S ADDRESS
				jmp RELBUF ;RELEASE BUFFER
				jmp CLRBMASK ;VECTOR TO CLRBMASK
* PAGE
*
* SOS DATA AND EQUATES
* (ACCESSIBLE ONLY TO SOS)
*
				.bs SYSGLOB+$80-*,$00
SERR			.da 00 ;SYSTEM ERROR CODE
*
DBUGBRK			nop ;TO ENABLE DEBUG BREAK POINTS,
				pla ; PATCH THESE BYTES TO
				pla ; JMP TO THE DEBUGGER
				rts 
*
KYBDNMI			jmp USERNMI
				jmp NMIDBUG
NMISPSV			.da 00
				jmp NMICONT
NMIEXIT			rts
*
*
SOSVER			.as "SOS 1.3 01-DEC-82"
SOSVERL			.eq *-SOSVER
*
				.as "(C) 1980, 1981 BY APPLE COMPUTER INC."
*
E1908			.eq $1908 ; ALLOCATED TO STEPHEN SMITH (MOUSE DRIVER)
* ABOVE SET AND RESET IN DISK DRIVER
SZPAGE			.eq $1800 ;SYSTEM ZERO PAGE
SXPAGE			.eq $1400 ;SYSTEM EXTEND PAGE
SSPAGE			.eq $0100 ;SYSTEM STACK PAGE
*
CZPAGE			.eq $1A00 ;CALLER'S ZERO PAGE
CXPAGE			.eq $1600 ;CALLER'S EXTEND PAGE
CSPAGE			.eq $1B00 ;CALLER'S STACK PAGE
CEVPRI			.da 00 ;CALLER'S EVENT PRIORITY
*
SIRTEMP			.da 00 ;TEMP FOR ALLOCSIR & DEALCSIR
SIRARGSIZ		.da 00 ;ARGUMENT COUNT FOR ALLOCSIR & DEALCSIR
IRQCNTR			.da $0000 ;FALSE IRQ COUNTER
NMICNTR			.da $0000 ;COUNTER FOR NMILOCK
QEVTEMP			.da 00 ;TEMP FOR QUEEVENT
QEV.THIS		.da 00 ;POINTER FOR QUEEVENT
QEV.LAST		.da 00 ;POINTER FOR QUEEVENT
*
SOSQUIT			.bs COLDSTRT
BACKMASK		.bs BACKBIT ; MASK USED BY BFM TO UPDATE BACKUP BIT
*
* TO CLEAR THE BACKUP BIT, A PROGRAM MUST JSR TO CLRBMASK THRU 1934 THEN DO A
* SET-FILE-INFO WITH NO INTERVENING SOS CALLS. ANY SOS CALL WILL

* SET BACKMASK AGAIN. THIS FEATURE IS INTENTIONALLY LEFT UNDOCUMENTED.
*
CLRBMASK		and #BACKBIT ; PURIFY
				sta BACKMASK ; SET THE MASK
				rts ; AND BACK TO THE CALLER
* PAGE
*
* SYSTEM DEATH REGISTER SAVE AREA
* (SYSTEM STACK MOVED TO $1700-$17FF)
*
				.bs SYSGLOB+$F6-*,$00
SDEATH.REGS		.eq *
				.da 00 ;BANK
				.da 00 ;ZERO PAGE
				.da 00 ;ENVIRONMENT
				.da 00 ;Y
				.da 00 ;X
				.da 00 ;A
				.da 00 ;STATUS
				.da $00 ;PROGRAM COUNTER
				.da 00 ;STACK POINTER
*
* SYSTEM DEATH ERROR NUMBERS
*
BADBRK			.eq $01 ;BRK FROM SOS
BADINT1			.eq $02 ;INTERRUPT NOT FOUND
BADINT2			.eq $03 ;BAD ZERO PAGE ALLOCATION
NMIHANG			.eq $04 ;UNABLE TO LOCK NMI
EVQOVFL			.eq $05 ;EVENT QUEUE OVERFLOW
STKOVFL			.eq $06 ;STACK OVERFLOW
*
BADSYSCALL		.eq $07 ;DMGR DETECTED INVALID REQUEST CODE
DEV.OVFLOW		.eq $08 ;DMGR - TOO MANY DEVICE HANDLERS
MEM2SML			.eq $09 ;MEMORY SIZE < 64K
VCBERR			.eq $0A ;VOLUME CONTROL BLOCK NOT USABLE (BFMGR)
FCBERR			.eq $0B ;FILE CONTROL BLOCK CRASHED
ALCERR			.eq $0C ;ALLOCATION BLOCKS INVALID
TOOLONG			.eq $0E ;PATHNAME BUFFER OVERFLOW
BADBUFNUM		.eq $0F ;INVALID BUFFER NUMBER
BADBUFSIZ		.eq $10 ;INVALID BUFFER SIZE (=0 OR >16K)
* PAGE
*
* SYSTEM ERROR NUMBERS
*
* - SYSTEM CALL MANAGER
*
BADSCNUM		.eq $01 ;BAD SYSTEM CALL NUMBER
BADCZPAGE		.eq $02 ;BAD CALLER'S ZPAGE (MUST=$1A)
BADXBYTE		.eq $03 ;BITS 6..4 <> 0
BADSCPCNT		.eq $04 ;BAD SYSTEM CALL PARM COUNT
BADSCBNDS		.eq $05 ;SYS CALL PARM ADR
*
* - DEVICE MANAGER
*
NODNAME			.eq $10 ;DEVICE NAME NOT FOUND
BADDNUM			.eq $11 ;INVALID DEV.NUM PARM
*
* - DEVICE HANDLERS (STANDARD ERRORS)
*
XREQCODE		.eq $20 ;INVALID REQUEST CODE
XCTLCODE		.eq $21 ;INVALID CONTROL/STATUS CODE
XCTLPARM		.eq $22 ;INVALID CONTROL/STATUS PARM
XNOTOPEN		.eq $23 ;DEVICE NOT OPEN
XNOTAVAIL		.eq $24 ;DEVICE NOT AVAILABLE
XNORESRC		.eq $25 ;UNABLE TO OBTAIN RESOURCE
XBADOP			.eq $26 ;INVALID OPERATION
XIOERROR		.eq $27 ;I/O ERROR
*
XNODRIVE		.eq $28 ;NO DRIVE CONNECTED
XNOWRITE		.eq $2B ;DEVICE WRITE PROTECTED
XBYTECNT		.eq $2C ;BYTE COUNT <> A MULTIPLE OF 512
XBLKNUM			.eq $2D ;BLOCK NUMBER TOO LARGE
XDISKSW			.eq $2E ;DISK MEDIA HAS BEEN SWITCHED
*
* - NOTE: ERROR CODES $30-$3F HAVE BEEN RESERVED FOR DEVICE
* HANDLER SPECIFIC ERRORS
*
*
* - FILE MANAGER
*
BADPATH			.eq $40 ;PATHNAME, INVALID SYNTAX

CFCBFULL		.eq $41 ;CHAR FILE CTRL BLOCK TABLE FULL
FCBFULL			.eq $42 ;BLOCK FILE CTRL BLOCK TABLE FULL
BADREFNUM		.eq $43 ;INVALID REF.NUM PARM
PATHNOTFND		.eq $44 ;PATHNAME NOT FOUND
VNFERR			.eq $45 ;VOLUME NOT FOUND
FNFERR			.eq $46 ;FILE NOT FOUND
DUPERR			.eq $47 ;DUPLICATE FILE NAME ERROR
OVRERR			.eq $48 ;NOT ENOUGH DISK SPACE FOR PREALLOCATION
DIRFULL			.eq $49 ;DIRECTORY FULL ERROR
CPTERR			.eq $4A ;FILE INCOMPATIBLE SOS VERSION
TYPERR			.eq $4B ;NOT CURRENTLY SUPPORTED FILE TYPE
EOFERR			.eq $4C ;POSITION ATTEMPTED BEYOND END OF FILE
POSNERR			.eq $4D ;ILLEGAL POSITION (L.T. 0 OR G.T. $FFFFFF)
ACCSERR			.eq $4E ;FILE ACCESS R/W REQUEST CONFLICTS WITH ATTRIBUTES
BTSERR			.eq $4F ;USER SUPPLIED BUFFER TOO SMALL
FILBUSY			.eq $50 ;EITHER WRITE WAS REQUESTED OR WRITE ACCESS ALREADY ALLOCATED
DIRERR			.eq $51 ;DIRECTORY ERROR
NOTSOS			.eq $52 ;NOT A SOS DISKETTE
BADLSTCNT		.eq $53 ;INVALID VALUE IN LIST PARAMETER
OUTOFMEM		.eq $54 ;OUT OF FREE MEMORY FOR BUFFER
BUFTBLFULL		.eq $55 ;BUFFER TABLE FULL
BADSYSBUF		.eq $56 ;INVALID SYSBUF PARAMETER
DUPVOL			.eq $57 ;SON A BITCH GOT TWO VOLUMES OF SAME ROOT NAME!!!
NOTBLKDEV		.eq $58
LVLERR			.eq $59 ;INVALID FILE LEVEL
BITMAPADR		.eq $5A
BACKBIT			.eq $20 ; MASK FOR BACKUP BIT
*
* - UTILITY MANAGER
*
BADJMODE		.eq $70 ;INVALID JOYSTICK REQUEST
*
* - MEMORY MANAGER
*
BADBKPG			.eq $E0 ;INVALID BANK/PAGE PAIR
SEGRQDN			.eq $E1 ;SEGMENT REQUEST DENIED
SEGTBLFULL		.eq $E2 ;SEGMENT TABLE FULL
BADSEGNUM		.eq $E3 ;INVALID SEGMENT NUMBER
SEGNOTFND		.eq $E4 ;SEGMENT NOT FOUND
BADSRCHMODE		.eq $E5 ;INVALID SEARCH MODE PARM
BADCHGMODE		.eq $E6 ;INVALID CHANGE MODE PARM
BADPGCNT		.eq $E7 ;INVALID PAGE COUNT PARM
				.ph SYSGLOB+$100 FIXME: check if we need this
				.da $B800 ;KERNEL TARGET ADDRESS
				.da $47C0 ; AND LENGTH

*************************************************************************
* END OF APPLE /// SOS 1.3 SOURCE CODE FILE: SYSGLOB.SRC
*************************************************************************





*--------------------------------------
MAN
SAVE /A3OSX.BUILD/SOS/SOS.S.SYSGLOB
LOAD /A3OSX.BUILD/SOS/SOS.S
ASM
